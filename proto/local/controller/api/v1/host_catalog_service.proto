syntax = "proto3";

package controller.api.v1;

option go_package = "github.com/hashicorp/watchtower/internal/gen/controller/api;api";

import "protoc-gen-swagger/options/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "controller/api/resource/v1/host_catalog.proto";

service HostCatalogService {
  rpc GetHostCatalog(GetHostCatalogRequest) returns (GetHostCatalogResponse) {
    option (google.api.http) = {
      get: "/v1/org/{org}/project/{project}/host_catalogs/{id}"
      response_body: "item"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: {
        key: "default"
        value: {
          description: "The default error structure returned."
          schema: {
            json_schema: {
              ref: ".controller.api.v1.Error"
            };
          }
        }
      }
    };
  }
  rpc ListHostCatalogs(ListHostCatalogsRequest) returns (ListHostCatalogsResponse) {
    option (google.api.http) = {
      get: "/v1/org/{org}/project/{project}/host_catalogs"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: {
        key: "default"
        value: {
          description: "The default error structure returned."
          schema: {
            json_schema: {
              ref: ".controller.api.v1.Error"
            };
          }
        }
      }
    };
  }
  rpc CreateHostCatalog(CreateHostCatalogRequest) returns (CreateHostCatalogResponse) {
    option (google.api.http) = {
      post: "/v1/org/{org}/project/{project}/host_catalogs"
      body: "item"
      response_body: "item"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: {
        key: "default"
        value: {
          description: "The default error structure returned."
          schema: {
            json_schema: {
              ref: ".controller.api.v1.Error"
            };
          }
        }
      }
    };
  }
  rpc UpdateHostCatalog(UpdateHostCatalogRequest) returns (UpdateHostCatalogResponse) {
  // TODO: Potentially make this in line with GET and DELETE so we can correctly share the URLs for swagger, or make
  // those other methods in line with this.
    option (google.api.http) = {
      patch: "/v1/org/{org}/project/{project}/host_catalogs/{id}"
      body: "item"
        additional_bindings {
          patch: "/v1/org/{org}/project/{project}/host_catalogs/{id}"
          body: "*"
        }
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: {
        key: "default"
        value: {
          description: "The default error structure returned."
          schema: {
            json_schema: {
              ref: ".controller.api.v1.Error"
            };
          }
        }
      }
    };
  }
  rpc DeleteHostCatalog(DeleteHostCatalogRequest) returns (DeleteHostCatalogResponse) {
    option (google.api.http) = {
      delete: "/v1/org/{org}/project/{project}/host_catalogs/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: {
        key: "default"
        value: {
          description: "The default error structure returned."
          schema: {
            json_schema: {
              ref: ".controller.api.v1.Error"
            };
          }
        }
      }
    };
  }
}

enum HostCatalogView {
  HOST_CATALOG_VIEW_UNSPECIFIED = 0;
  HOST_CATALOG_VIEW_BASIC = 1;
  HOST_CATALOG_VIEW_FULL = 2;
}

message GetHostCatalogRequest {
  // TODO: Colapse this down into a single uri field once we figure out how to generate good swagger where the full
  // uri is declared in a single field.
  string org = 1;
  string project = 2;
  string id = 3;
  HostCatalogView view = 4;
}

message GetHostCatalogResponse {
  api.resource.v1.HostCatalogResult item = 1;
}

message ListHostCatalogsRequest {
  string org = 1;
  string project = 2;

  bool ignore_result_limit = 3;
  HostCatalogView view = 4;
}

message ListHostCatalogsResponse {
  repeated api.resource.v1.HostCatalogResult items = 1;
}

message CreateHostCatalogRequest {
  string org = 1;
  string project = 2;
  api.resource.v1.HostCatalog item = 3;
}

message CreateHostCatalogResponse {
  string uri = 1;
  api.resource.v1.HostCatalogResult item = 2;
}

message UpdateHostCatalogRequest {
  string org = 1;
  string project = 2;
  string id = 3;
  api.resource.v1.HostCatalog item = 4;
  google.protobuf.FieldMask update_mask = 5;
}

message UpdateHostCatalogResponse {
  api.resource.v1.HostCatalogResult item = 1;
}

message DeleteHostCatalogRequest {
  string org = 1;
  string project = 2;
  string id = 3;
}

message DeleteHostCatalogResponse {
  bool existed = 1;
}
