syntax = "proto3";

package controller.api.v1;

option go_package = "github.com/hashicorp/watchtower/gen/controller/api;api";

import "protoc-gen-swagger/options/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "controller/api/resource/v1/ec2catalog.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Controller API"
    version: "0.0.1"
    description: "Controller API for "
  }
  schemes: HTTPS
  schemes: HTTP
};

// Controller Service contains methods for managing a Controller.
service ControllerService {
    // Retrieves an EC2Catalog using the provided id or friendly name.
    rpc GetEc2Catalog(GetEc2CatalogRequest) returns (GetEc2CatalogResponse) {
      option (google.api.http) = {
        get: "/v1/ec2_catalogs/{id}"
        response_body: "catalog"
      };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        responses: {
          key: "default"
          value: {
            description: "The default error structure returned."
            schema: {
              json_schema: {
                ref: ".controller.api.Error"
              };
            }
          }
        }
      };
    }

  // Lists the EC2Catalogs known to Watchtower.
  rpc ListEc2Catalogs(ListEc2CatalogsRequest) returns (ListEc2CatalogsResponse) {
    option (google.api.http) = {
      get: "/v1/ec2_catalogs"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: {
        key: "default"
        value: {
          description: "The default error structure returned."
          schema: {
            json_schema: {
              ref: ".controller.api.Error"
            };
          }
        }
      }
    };
  }

  // Creates an EC2Catalog.  Verification of the provided credentials and account/region mapping is done
  // at the time this is called.  If this returns without an error the structure of the Catalog has been verified.
  rpc CreateEc2Catalog(CreateEc2CatalogRequest) returns (CreateEc2CatalogResponse) {
    option (google.api.http) = {
      post: "/v1/ec2_catalogs"
      body: "*"
      response_body: "catalog"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: {
        key: "default"
        value: {
          description: "The default error structure returned."
          schema: {
            json_schema: {
              ref: ".controller.api.Error"
            };
          }
        }
      }
    };
  }

  rpc UpdateEc2Catalog(UpdateEc2CatalogRequest) returns (UpdateEc2CatalogResponse) {
    option (google.api.http) = {
      patch: "/v1/ec2_catalogs/{catalog.id}"
      body: "catalog"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: {
        key: "default"
        value: {
          description: "The default error structure returned."
          schema: {
            json_schema: {
              ref: ".controller.api.Error"
            };
          }
        }
      }
    };
  }

  rpc DeleteEc2Catalog(DeleteEc2CatalogRequest) returns (DeleteEc2CatalogResponse) {
    option (google.api.http) = {
      delete: "/v1/ec2_catalogs/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: {
        key: "default"
        value: {
          description: "The default error structure returned."
          schema: {
            json_schema: {
              ref: ".controller.api.Error"
            };
          }
        }
      }
    };
  }

  rpc RotateEc2CatalogAccessKey(RotateEc2CatalogAccessKeyRequest) returns (RotateEc2CatalogAccessKeyResponse) {
    option (google.api.http) = {
      post: "/v1/ec2_catalogs/{id}:rotate"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: {
        key: "default"
        value: {
          description: "The default error structure returned."
          schema: {
            json_schema: {
              ref: ".controller.api.Error"
            };
          }
        }
      }
    };
  }
}


message GetEc2CatalogRequest {
  // The id can be the system defined identifier or the friendly name.
  string id = 1;
}

message GetEc2CatalogResponse {
    api.resource.v1.Ec2Catalog catalog = 1;
}

message ListEc2CatalogsRequest {
  // Allows all EC2 instances regardless of the configured maximum result limit.
  bool ignore_result_limit = 1;
}

message ListEc2CatalogsResponse {
  repeated api.resource.v1.Ec2Catalog items = 1;
}

message CreateEc2CatalogRequest {
    // The request to create an EC2Catalog.  The fields access_key, secret_key, and regions are required.
    // The account_id is a value Watchtower looks up from AWS upon creation and should not be provided.  If rotate is
    // set to true the provided access key will be rotated to ensure only Watchtower knows the AWS secret key.
    api.resource.v1.Ec2Catalog catalog = 1;
}

message CreateEc2CatalogResponse {
  string id = 1;
  api.resource.v1.Ec2Catalog catalog = 2;
}

message UpdateEc2CatalogRequest {
  // Allows an existing EC2Catalog to be updated.  The field rotate=true requires access_key and secret_key to also be
  // set.  The only stored fields that can be updated with this call are the regions list and
  // the access_key and secret_key.
  // When a new access_key and secret_key are provided, a lookup will happen to verify they are for the same aws account
  // as the previously provided credentials.  If not an error will be returned.
  api.resource.v1.Ec2Catalog catalog = 1;
  google.protobuf.FieldMask update_mask = 2;
}

message UpdateEc2CatalogResponse {
    api.resource.v1.Ec2Catalog catalog = 1;
}

message DeleteEc2CatalogRequest {
  string id = 1;
}

message DeleteEc2CatalogResponse {
  bool existed = 1;
}

message RotateEc2CatalogAccessKeyRequest {
  string id = 1;
}

message RotateEc2CatalogAccessKeyResponse {}
