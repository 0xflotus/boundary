syntax = "proto3";

package watchtower;

option go_package = "github.com/hashicorp/watchtower/apipb;apipb";

import "protoc-gen-swagger/options/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Watchtower Host Catalogs Controller"
    version: "0.0.1"
    description: "Watchtower API for managing host catalogs"
  }
  schemes: HTTPS
  schemes: HTTP
};


service Watchtower {
  rpc GetEc2Catalog(GetEc2CatalogRequest) returns (Ec2Catalog) {
    option (google.api.http) = {
      get: "/v1/ec2_catalogs/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: {
        key: "default"
        value: {
          description: "The default error structure returned."
          schema: {
            json_schema: {
              ref: ".watchtower.Error"
            };
          }
        }
      }
    };
  }
  rpc ListEc2Catalogs(ListEc2CatalogsRequest) returns (ListEc2CatalogsResponse) {
    option (google.api.http) = {
      get: "/v1/ec2_catalogs"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: {
        key: "default"
        value: {
          description: "The default error structure returned."
          schema: {
            json_schema: {
              ref: ".watchtower.Error"
            }
          }
        }
      }
    };
  }
  rpc CreateEc2Catalog(CreateEc2CatalogRequest) returns (CreateEc2CatalogResponse) {
    option (google.api.http) = {
      post: "/v1/ec2_catalogs"
      body: "*"
      response_body: "catalog"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: {
        key: "default"
        value: {
          description: "The default error structure returned."
          schema: {
            json_schema: {
              ref: ".watchtower.Error"
            }
          }
        }
      }
    };
  }
  rpc UpdateEc2Catalog(UpdateEc2CatalogRequest) returns (Ec2Catalog) {
    option (google.api.http) = {
      patch: "/v1/ec2_catalogs/{catalog.id}"
      body: "catalog"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: {
        key: "default"
        value: {
          description: "The default error structure returned."
          schema: {
            json_schema: {
              ref: ".watchtower.Error"
            }
          }
        }
      }
    };
  }
  rpc DeleteEc2Catalog(DeleteEc2CatalogRequest) returns (DeleteEc2CatalogResponse) {
    option (google.api.http) = {
      delete: "/v1/ec2_catalogs/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: {
        key: "default"
        value: {
          description: "The default error structure returned."
          schema: {
            json_schema: {
              ref: ".watchtower.Error"
            }
          }
        }
      }
    };
  }
  rpc RotateEc2CatalogAccessKey(RotateEc2CatalogAccessKeyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/ec2_catalogs/{id}:rotate"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      responses: {
        key: "default"
        value: {
          description: "The default error structure returned."
          schema: {
            json_schema: {
              ref: ".watchtower.Error"
            }
          }
        }
      }
    };
  }
}

message GetEc2CatalogRequest {
  // The id can be the system defined identifier or the friendly name.
  string id = 1;
}

message ListEc2CatalogsRequest {
  // Allows all EC2 instances regardless of the configured maximum result limit.
  bool ignore_result_limit = 1;
}

message ListEc2CatalogsResponse {
  repeated Ec2Catalog items = 1;
}

message CreateEc2CatalogRequest {
  Ec2Catalog catalog = 1;
}

message CreateEc2CatalogResponse {
  string id = 1;
  Ec2Catalog catalog = 2;
}

message UpdateEc2CatalogRequest {
  Ec2Catalog catalog = 1;
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteEc2CatalogRequest {
  string id = 1;
}

message DeleteEc2CatalogResponse {
  bool existed = 1;
}

message RotateEc2CatalogAccessKeyRequest {
  string id = 1;
}

message Ec2Catalog {
  string id = 1;
  string friendly_name = 2;
  string access_key = 3;
  string secret_key = 4;
  repeated string regions = 5;
  bool rotate = 6;
  google.protobuf.Timestamp created_time = 7;
  google.protobuf.Timestamp updated_time = 8;
}

message ErrorDetails {
  string TraceId = 1;
  string request_id = 2;
  repeated string request_fields = 3;
}

message Error {
  int32 status = 1;
  string code = 2;
  string message = 3;
  ErrorDetails details = 4;
}
