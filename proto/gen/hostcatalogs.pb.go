// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.11.4
// source: hostcatalogs.proto

package apipb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetEc2CatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id can be the system defined identifier or the friendly name.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetEc2CatalogRequest) Reset() {
	*x = GetEc2CatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hostcatalogs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEc2CatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEc2CatalogRequest) ProtoMessage() {}

func (x *GetEc2CatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hostcatalogs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEc2CatalogRequest.ProtoReflect.Descriptor instead.
func (*GetEc2CatalogRequest) Descriptor() ([]byte, []int) {
	return file_hostcatalogs_proto_rawDescGZIP(), []int{0}
}

func (x *GetEc2CatalogRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListEc2CatalogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allows all EC2 instances regardless of the configured maximum result limit.
	IgnoreResultLimit bool `protobuf:"varint,1,opt,name=ignore_result_limit,json=ignoreResultLimit,proto3" json:"ignore_result_limit,omitempty"`
}

func (x *ListEc2CatalogsRequest) Reset() {
	*x = ListEc2CatalogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hostcatalogs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEc2CatalogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEc2CatalogsRequest) ProtoMessage() {}

func (x *ListEc2CatalogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hostcatalogs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEc2CatalogsRequest.ProtoReflect.Descriptor instead.
func (*ListEc2CatalogsRequest) Descriptor() ([]byte, []int) {
	return file_hostcatalogs_proto_rawDescGZIP(), []int{1}
}

func (x *ListEc2CatalogsRequest) GetIgnoreResultLimit() bool {
	if x != nil {
		return x.IgnoreResultLimit
	}
	return false
}

type ListEc2CatalogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Ec2Catalog `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListEc2CatalogsResponse) Reset() {
	*x = ListEc2CatalogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hostcatalogs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEc2CatalogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEc2CatalogsResponse) ProtoMessage() {}

func (x *ListEc2CatalogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hostcatalogs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEc2CatalogsResponse.ProtoReflect.Descriptor instead.
func (*ListEc2CatalogsResponse) Descriptor() ([]byte, []int) {
	return file_hostcatalogs_proto_rawDescGZIP(), []int{2}
}

func (x *ListEc2CatalogsResponse) GetItems() []*Ec2Catalog {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateEc2CatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Catalog *Ec2Catalog `protobuf:"bytes,1,opt,name=catalog,proto3" json:"catalog,omitempty"`
}

func (x *CreateEc2CatalogRequest) Reset() {
	*x = CreateEc2CatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hostcatalogs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEc2CatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEc2CatalogRequest) ProtoMessage() {}

func (x *CreateEc2CatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hostcatalogs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEc2CatalogRequest.ProtoReflect.Descriptor instead.
func (*CreateEc2CatalogRequest) Descriptor() ([]byte, []int) {
	return file_hostcatalogs_proto_rawDescGZIP(), []int{3}
}

func (x *CreateEc2CatalogRequest) GetCatalog() *Ec2Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

type CreateEc2CatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Catalog *Ec2Catalog `protobuf:"bytes,2,opt,name=catalog,proto3" json:"catalog,omitempty"`
}

func (x *CreateEc2CatalogResponse) Reset() {
	*x = CreateEc2CatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hostcatalogs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEc2CatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEc2CatalogResponse) ProtoMessage() {}

func (x *CreateEc2CatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hostcatalogs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEc2CatalogResponse.ProtoReflect.Descriptor instead.
func (*CreateEc2CatalogResponse) Descriptor() ([]byte, []int) {
	return file_hostcatalogs_proto_rawDescGZIP(), []int{4}
}

func (x *CreateEc2CatalogResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateEc2CatalogResponse) GetCatalog() *Ec2Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

type UpdateEc2CatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Catalog    *Ec2Catalog           `protobuf:"bytes,1,opt,name=catalog,proto3" json:"catalog,omitempty"`
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateEc2CatalogRequest) Reset() {
	*x = UpdateEc2CatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hostcatalogs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEc2CatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEc2CatalogRequest) ProtoMessage() {}

func (x *UpdateEc2CatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hostcatalogs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEc2CatalogRequest.ProtoReflect.Descriptor instead.
func (*UpdateEc2CatalogRequest) Descriptor() ([]byte, []int) {
	return file_hostcatalogs_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateEc2CatalogRequest) GetCatalog() *Ec2Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

func (x *UpdateEc2CatalogRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteEc2CatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteEc2CatalogRequest) Reset() {
	*x = DeleteEc2CatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hostcatalogs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEc2CatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEc2CatalogRequest) ProtoMessage() {}

func (x *DeleteEc2CatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hostcatalogs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEc2CatalogRequest.ProtoReflect.Descriptor instead.
func (*DeleteEc2CatalogRequest) Descriptor() ([]byte, []int) {
	return file_hostcatalogs_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteEc2CatalogRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteEc2CatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Existed bool `protobuf:"varint,1,opt,name=existed,proto3" json:"existed,omitempty"`
}

func (x *DeleteEc2CatalogResponse) Reset() {
	*x = DeleteEc2CatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hostcatalogs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEc2CatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEc2CatalogResponse) ProtoMessage() {}

func (x *DeleteEc2CatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hostcatalogs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEc2CatalogResponse.ProtoReflect.Descriptor instead.
func (*DeleteEc2CatalogResponse) Descriptor() ([]byte, []int) {
	return file_hostcatalogs_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteEc2CatalogResponse) GetExisted() bool {
	if x != nil {
		return x.Existed
	}
	return false
}

type RotateEc2CatalogAccessKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RotateEc2CatalogAccessKeyRequest) Reset() {
	*x = RotateEc2CatalogAccessKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hostcatalogs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateEc2CatalogAccessKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateEc2CatalogAccessKeyRequest) ProtoMessage() {}

func (x *RotateEc2CatalogAccessKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hostcatalogs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateEc2CatalogAccessKeyRequest.ProtoReflect.Descriptor instead.
func (*RotateEc2CatalogAccessKeyRequest) Descriptor() ([]byte, []int) {
	return file_hostcatalogs_proto_rawDescGZIP(), []int{8}
}

func (x *RotateEc2CatalogAccessKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Ec2Catalog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FriendlyName string               `protobuf:"bytes,2,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	AccessKey    string               `protobuf:"bytes,3,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey    string               `protobuf:"bytes,4,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Regions      []string             `protobuf:"bytes,5,rep,name=regions,proto3" json:"regions,omitempty"`
	Rotate       bool                 `protobuf:"varint,6,opt,name=rotate,proto3" json:"rotate,omitempty"`
	CreatedTime  *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdatedTime  *timestamp.Timestamp `protobuf:"bytes,8,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (x *Ec2Catalog) Reset() {
	*x = Ec2Catalog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hostcatalogs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ec2Catalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ec2Catalog) ProtoMessage() {}

func (x *Ec2Catalog) ProtoReflect() protoreflect.Message {
	mi := &file_hostcatalogs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ec2Catalog.ProtoReflect.Descriptor instead.
func (*Ec2Catalog) Descriptor() ([]byte, []int) {
	return file_hostcatalogs_proto_rawDescGZIP(), []int{9}
}

func (x *Ec2Catalog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ec2Catalog) GetFriendlyName() string {
	if x != nil {
		return x.FriendlyName
	}
	return ""
}

func (x *Ec2Catalog) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *Ec2Catalog) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *Ec2Catalog) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *Ec2Catalog) GetRotate() bool {
	if x != nil {
		return x.Rotate
	}
	return false
}

func (x *Ec2Catalog) GetCreatedTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *Ec2Catalog) GetUpdatedTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedTime
	}
	return nil
}

type ErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId       string   `protobuf:"bytes,1,opt,name=TraceId,proto3" json:"TraceId,omitempty"`
	RequestId     string   `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	RequestFields []string `protobuf:"bytes,3,rep,name=request_fields,json=requestFields,proto3" json:"request_fields,omitempty"`
}

func (x *ErrorDetails) Reset() {
	*x = ErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hostcatalogs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails) ProtoMessage() {}

func (x *ErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_hostcatalogs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails.ProtoReflect.Descriptor instead.
func (*ErrorDetails) Descriptor() ([]byte, []int) {
	return file_hostcatalogs_proto_rawDescGZIP(), []int{10}
}

func (x *ErrorDetails) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *ErrorDetails) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ErrorDetails) GetRequestFields() []string {
	if x != nil {
		return x.RequestFields
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32         `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Code    string        `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Details *ErrorDetails `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hostcatalogs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_hostcatalogs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_hostcatalogs_proto_rawDescGZIP(), []int{11}
}

func (x *Error) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetDetails() *ErrorDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

var File_hostcatalogs_proto protoreflect.FileDescriptor

var file_hostcatalogs_proto_rawDesc = []byte{
	0x0a, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61,
	0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x63, 0x32, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x47,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x4b, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x2e, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x22, 0x5c, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x63,
	0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x45,
	0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x63, 0x32,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x45, 0x63, 0x32,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x29, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x22, 0x32,
	0x0a, 0x20, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x0a, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77,
	0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x32, 0xd6, 0x09, 0x0a, 0x0a, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x12, 0xb6, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45,
	0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x20, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x22, 0x6b, 0x92, 0x41, 0x4b, 0x4a, 0x49, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x25, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x12, 0x15, 0x0a, 0x13,
	0x1a, 0x11, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x63, 0x32, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0xc2, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x22, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x92,
	0x41, 0x4b, 0x4a, 0x49, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a,
	0x25, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x12, 0x15, 0x0a, 0x13, 0x1a, 0x11, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x63, 0x32, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0xd1, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x23, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x63,
	0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x92, 0x41, 0x4b, 0x4a, 0x49, 0x0a, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x25, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x12, 0x15,
	0x0a, 0x13, 0x1a, 0x11, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x10, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x63, 0x32, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x3a, 0x01, 0x2a,
	0x62, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0xcd, 0x01, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x23,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x2e, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x7c, 0x92, 0x41, 0x4b,
	0x4a, 0x49, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x25, 0x54,
	0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x2e, 0x12, 0x15, 0x0a, 0x13, 0x1a, 0x11, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x32, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x63, 0x32, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x64, 0x7d,
	0x3a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0xca, 0x01, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x23,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x92, 0x41, 0x4b, 0x4a, 0x49,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x25, 0x54, 0x68, 0x65,
	0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x2e, 0x12, 0x15, 0x0a, 0x13, 0x1a, 0x11, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f,
	0x77, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a,
	0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x63, 0x32, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xd8, 0x01, 0x0a, 0x19, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77, 0x65,
	0x72, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x75, 0x92, 0x41, 0x4b, 0x4a,
	0x49, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x25, 0x54, 0x68,
	0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x2e, 0x12, 0x15, 0x0a, 0x13, 0x1a, 0x11, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74,
	0x6f, 0x77, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21,
	0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x63, 0x32, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x01,
	0x2a, 0x42, 0x8d, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x74, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x70, 0x62, 0x3b, 0x61, 0x70, 0x69, 0x70,
	0x62, 0x92, 0x41, 0x5d, 0x12, 0x57, 0x0a, 0x23, 0x57, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77,
	0x65, 0x72, 0x20, 0x48, 0x6f, 0x73, 0x74, 0x20, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73,
	0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x29, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x32, 0x05, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x2a, 0x02, 0x02,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hostcatalogs_proto_rawDescOnce sync.Once
	file_hostcatalogs_proto_rawDescData = file_hostcatalogs_proto_rawDesc
)

func file_hostcatalogs_proto_rawDescGZIP() []byte {
	file_hostcatalogs_proto_rawDescOnce.Do(func() {
		file_hostcatalogs_proto_rawDescData = protoimpl.X.CompressGZIP(file_hostcatalogs_proto_rawDescData)
	})
	return file_hostcatalogs_proto_rawDescData
}

var file_hostcatalogs_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_hostcatalogs_proto_goTypes = []interface{}{
	(*GetEc2CatalogRequest)(nil),             // 0: watchtower.GetEc2CatalogRequest
	(*ListEc2CatalogsRequest)(nil),           // 1: watchtower.ListEc2CatalogsRequest
	(*ListEc2CatalogsResponse)(nil),          // 2: watchtower.ListEc2CatalogsResponse
	(*CreateEc2CatalogRequest)(nil),          // 3: watchtower.CreateEc2CatalogRequest
	(*CreateEc2CatalogResponse)(nil),         // 4: watchtower.CreateEc2CatalogResponse
	(*UpdateEc2CatalogRequest)(nil),          // 5: watchtower.UpdateEc2CatalogRequest
	(*DeleteEc2CatalogRequest)(nil),          // 6: watchtower.DeleteEc2CatalogRequest
	(*DeleteEc2CatalogResponse)(nil),         // 7: watchtower.DeleteEc2CatalogResponse
	(*RotateEc2CatalogAccessKeyRequest)(nil), // 8: watchtower.RotateEc2CatalogAccessKeyRequest
	(*Ec2Catalog)(nil),                       // 9: watchtower.Ec2Catalog
	(*ErrorDetails)(nil),                     // 10: watchtower.ErrorDetails
	(*Error)(nil),                            // 11: watchtower.Error
	(*field_mask.FieldMask)(nil),             // 12: google.protobuf.FieldMask
	(*timestamp.Timestamp)(nil),              // 13: google.protobuf.Timestamp
	(*empty.Empty)(nil),                      // 14: google.protobuf.Empty
}
var file_hostcatalogs_proto_depIdxs = []int32{
	9,  // 0: watchtower.ListEc2CatalogsResponse.items:type_name -> watchtower.Ec2Catalog
	9,  // 1: watchtower.CreateEc2CatalogRequest.catalog:type_name -> watchtower.Ec2Catalog
	9,  // 2: watchtower.CreateEc2CatalogResponse.catalog:type_name -> watchtower.Ec2Catalog
	9,  // 3: watchtower.UpdateEc2CatalogRequest.catalog:type_name -> watchtower.Ec2Catalog
	12, // 4: watchtower.UpdateEc2CatalogRequest.update_mask:type_name -> google.protobuf.FieldMask
	13, // 5: watchtower.Ec2Catalog.created_time:type_name -> google.protobuf.Timestamp
	13, // 6: watchtower.Ec2Catalog.updated_time:type_name -> google.protobuf.Timestamp
	10, // 7: watchtower.Error.details:type_name -> watchtower.ErrorDetails
	0,  // 8: watchtower.Watchtower.GetEc2Catalog:input_type -> watchtower.GetEc2CatalogRequest
	1,  // 9: watchtower.Watchtower.ListEc2Catalogs:input_type -> watchtower.ListEc2CatalogsRequest
	3,  // 10: watchtower.Watchtower.CreateEc2Catalog:input_type -> watchtower.CreateEc2CatalogRequest
	5,  // 11: watchtower.Watchtower.UpdateEc2Catalog:input_type -> watchtower.UpdateEc2CatalogRequest
	6,  // 12: watchtower.Watchtower.DeleteEc2Catalog:input_type -> watchtower.DeleteEc2CatalogRequest
	8,  // 13: watchtower.Watchtower.RotateEc2CatalogAccessKey:input_type -> watchtower.RotateEc2CatalogAccessKeyRequest
	9,  // 14: watchtower.Watchtower.GetEc2Catalog:output_type -> watchtower.Ec2Catalog
	2,  // 15: watchtower.Watchtower.ListEc2Catalogs:output_type -> watchtower.ListEc2CatalogsResponse
	4,  // 16: watchtower.Watchtower.CreateEc2Catalog:output_type -> watchtower.CreateEc2CatalogResponse
	9,  // 17: watchtower.Watchtower.UpdateEc2Catalog:output_type -> watchtower.Ec2Catalog
	7,  // 18: watchtower.Watchtower.DeleteEc2Catalog:output_type -> watchtower.DeleteEc2CatalogResponse
	14, // 19: watchtower.Watchtower.RotateEc2CatalogAccessKey:output_type -> google.protobuf.Empty
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_hostcatalogs_proto_init() }
func file_hostcatalogs_proto_init() {
	if File_hostcatalogs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hostcatalogs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEc2CatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hostcatalogs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEc2CatalogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hostcatalogs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEc2CatalogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hostcatalogs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEc2CatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hostcatalogs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEc2CatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hostcatalogs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEc2CatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hostcatalogs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEc2CatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hostcatalogs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEc2CatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hostcatalogs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateEc2CatalogAccessKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hostcatalogs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ec2Catalog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hostcatalogs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hostcatalogs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hostcatalogs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hostcatalogs_proto_goTypes,
		DependencyIndexes: file_hostcatalogs_proto_depIdxs,
		MessageInfos:      file_hostcatalogs_proto_msgTypes,
	}.Build()
	File_hostcatalogs_proto = out.File
	file_hostcatalogs_proto_rawDesc = nil
	file_hostcatalogs_proto_goTypes = nil
	file_hostcatalogs_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WatchtowerClient is the client API for Watchtower service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WatchtowerClient interface {
	GetEc2Catalog(ctx context.Context, in *GetEc2CatalogRequest, opts ...grpc.CallOption) (*Ec2Catalog, error)
	ListEc2Catalogs(ctx context.Context, in *ListEc2CatalogsRequest, opts ...grpc.CallOption) (*ListEc2CatalogsResponse, error)
	CreateEc2Catalog(ctx context.Context, in *CreateEc2CatalogRequest, opts ...grpc.CallOption) (*CreateEc2CatalogResponse, error)
	UpdateEc2Catalog(ctx context.Context, in *UpdateEc2CatalogRequest, opts ...grpc.CallOption) (*Ec2Catalog, error)
	DeleteEc2Catalog(ctx context.Context, in *DeleteEc2CatalogRequest, opts ...grpc.CallOption) (*DeleteEc2CatalogResponse, error)
	RotateEc2CatalogAccessKey(ctx context.Context, in *RotateEc2CatalogAccessKeyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type watchtowerClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchtowerClient(cc grpc.ClientConnInterface) WatchtowerClient {
	return &watchtowerClient{cc}
}

func (c *watchtowerClient) GetEc2Catalog(ctx context.Context, in *GetEc2CatalogRequest, opts ...grpc.CallOption) (*Ec2Catalog, error) {
	out := new(Ec2Catalog)
	err := c.cc.Invoke(ctx, "/watchtower.Watchtower/GetEc2Catalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchtowerClient) ListEc2Catalogs(ctx context.Context, in *ListEc2CatalogsRequest, opts ...grpc.CallOption) (*ListEc2CatalogsResponse, error) {
	out := new(ListEc2CatalogsResponse)
	err := c.cc.Invoke(ctx, "/watchtower.Watchtower/ListEc2Catalogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchtowerClient) CreateEc2Catalog(ctx context.Context, in *CreateEc2CatalogRequest, opts ...grpc.CallOption) (*CreateEc2CatalogResponse, error) {
	out := new(CreateEc2CatalogResponse)
	err := c.cc.Invoke(ctx, "/watchtower.Watchtower/CreateEc2Catalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchtowerClient) UpdateEc2Catalog(ctx context.Context, in *UpdateEc2CatalogRequest, opts ...grpc.CallOption) (*Ec2Catalog, error) {
	out := new(Ec2Catalog)
	err := c.cc.Invoke(ctx, "/watchtower.Watchtower/UpdateEc2Catalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchtowerClient) DeleteEc2Catalog(ctx context.Context, in *DeleteEc2CatalogRequest, opts ...grpc.CallOption) (*DeleteEc2CatalogResponse, error) {
	out := new(DeleteEc2CatalogResponse)
	err := c.cc.Invoke(ctx, "/watchtower.Watchtower/DeleteEc2Catalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchtowerClient) RotateEc2CatalogAccessKey(ctx context.Context, in *RotateEc2CatalogAccessKeyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/watchtower.Watchtower/RotateEc2CatalogAccessKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchtowerServer is the server API for Watchtower service.
type WatchtowerServer interface {
	GetEc2Catalog(context.Context, *GetEc2CatalogRequest) (*Ec2Catalog, error)
	ListEc2Catalogs(context.Context, *ListEc2CatalogsRequest) (*ListEc2CatalogsResponse, error)
	CreateEc2Catalog(context.Context, *CreateEc2CatalogRequest) (*CreateEc2CatalogResponse, error)
	UpdateEc2Catalog(context.Context, *UpdateEc2CatalogRequest) (*Ec2Catalog, error)
	DeleteEc2Catalog(context.Context, *DeleteEc2CatalogRequest) (*DeleteEc2CatalogResponse, error)
	RotateEc2CatalogAccessKey(context.Context, *RotateEc2CatalogAccessKeyRequest) (*empty.Empty, error)
}

// UnimplementedWatchtowerServer can be embedded to have forward compatible implementations.
type UnimplementedWatchtowerServer struct {
}

func (*UnimplementedWatchtowerServer) GetEc2Catalog(context.Context, *GetEc2CatalogRequest) (*Ec2Catalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEc2Catalog not implemented")
}
func (*UnimplementedWatchtowerServer) ListEc2Catalogs(context.Context, *ListEc2CatalogsRequest) (*ListEc2CatalogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEc2Catalogs not implemented")
}
func (*UnimplementedWatchtowerServer) CreateEc2Catalog(context.Context, *CreateEc2CatalogRequest) (*CreateEc2CatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEc2Catalog not implemented")
}
func (*UnimplementedWatchtowerServer) UpdateEc2Catalog(context.Context, *UpdateEc2CatalogRequest) (*Ec2Catalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEc2Catalog not implemented")
}
func (*UnimplementedWatchtowerServer) DeleteEc2Catalog(context.Context, *DeleteEc2CatalogRequest) (*DeleteEc2CatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEc2Catalog not implemented")
}
func (*UnimplementedWatchtowerServer) RotateEc2CatalogAccessKey(context.Context, *RotateEc2CatalogAccessKeyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateEc2CatalogAccessKey not implemented")
}

func RegisterWatchtowerServer(s *grpc.Server, srv WatchtowerServer) {
	s.RegisterService(&_Watchtower_serviceDesc, srv)
}

func _Watchtower_GetEc2Catalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEc2CatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchtowerServer).GetEc2Catalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watchtower.Watchtower/GetEc2Catalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchtowerServer).GetEc2Catalog(ctx, req.(*GetEc2CatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watchtower_ListEc2Catalogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEc2CatalogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchtowerServer).ListEc2Catalogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watchtower.Watchtower/ListEc2Catalogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchtowerServer).ListEc2Catalogs(ctx, req.(*ListEc2CatalogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watchtower_CreateEc2Catalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEc2CatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchtowerServer).CreateEc2Catalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watchtower.Watchtower/CreateEc2Catalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchtowerServer).CreateEc2Catalog(ctx, req.(*CreateEc2CatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watchtower_UpdateEc2Catalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEc2CatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchtowerServer).UpdateEc2Catalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watchtower.Watchtower/UpdateEc2Catalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchtowerServer).UpdateEc2Catalog(ctx, req.(*UpdateEc2CatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watchtower_DeleteEc2Catalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEc2CatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchtowerServer).DeleteEc2Catalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watchtower.Watchtower/DeleteEc2Catalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchtowerServer).DeleteEc2Catalog(ctx, req.(*DeleteEc2CatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watchtower_RotateEc2CatalogAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateEc2CatalogAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchtowerServer).RotateEc2CatalogAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watchtower.Watchtower/RotateEc2CatalogAccessKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchtowerServer).RotateEc2CatalogAccessKey(ctx, req.(*RotateEc2CatalogAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Watchtower_serviceDesc = grpc.ServiceDesc{
	ServiceName: "watchtower.Watchtower",
	HandlerType: (*WatchtowerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEc2Catalog",
			Handler:    _Watchtower_GetEc2Catalog_Handler,
		},
		{
			MethodName: "ListEc2Catalogs",
			Handler:    _Watchtower_ListEc2Catalogs_Handler,
		},
		{
			MethodName: "CreateEc2Catalog",
			Handler:    _Watchtower_CreateEc2Catalog_Handler,
		},
		{
			MethodName: "UpdateEc2Catalog",
			Handler:    _Watchtower_UpdateEc2Catalog_Handler,
		},
		{
			MethodName: "DeleteEc2Catalog",
			Handler:    _Watchtower_DeleteEc2Catalog_Handler,
		},
		{
			MethodName: "RotateEc2CatalogAccessKey",
			Handler:    _Watchtower_RotateEc2CatalogAccessKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hostcatalogs.proto",
}
