// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: controller/api/v1/ec2catalog_service.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	resource "github.com/hashicorp/watchtower/internal/gen/controller/api/resource"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetEc2CatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id can be the system defined identifier or the friendly name.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetEc2CatalogRequest) Reset() {
	*x = GetEc2CatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEc2CatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEc2CatalogRequest) ProtoMessage() {}

func (x *GetEc2CatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEc2CatalogRequest.ProtoReflect.Descriptor instead.
func (*GetEc2CatalogRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_ec2catalog_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetEc2CatalogRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetEc2CatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Catalog *resource.Ec2Catalog `protobuf:"bytes,1,opt,name=catalog,proto3" json:"catalog,omitempty"`
}

func (x *GetEc2CatalogResponse) Reset() {
	*x = GetEc2CatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEc2CatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEc2CatalogResponse) ProtoMessage() {}

func (x *GetEc2CatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEc2CatalogResponse.ProtoReflect.Descriptor instead.
func (*GetEc2CatalogResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_ec2catalog_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetEc2CatalogResponse) GetCatalog() *resource.Ec2Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

type ListEc2CatalogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allows all EC2 instances regardless of the configured maximum result limit.
	IgnoreResultLimit bool `protobuf:"varint,1,opt,name=ignore_result_limit,json=ignoreResultLimit,proto3" json:"ignore_result_limit,omitempty"`
}

func (x *ListEc2CatalogsRequest) Reset() {
	*x = ListEc2CatalogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEc2CatalogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEc2CatalogsRequest) ProtoMessage() {}

func (x *ListEc2CatalogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEc2CatalogsRequest.ProtoReflect.Descriptor instead.
func (*ListEc2CatalogsRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_ec2catalog_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListEc2CatalogsRequest) GetIgnoreResultLimit() bool {
	if x != nil {
		return x.IgnoreResultLimit
	}
	return false
}

type ListEc2CatalogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*resource.Ec2Catalog `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListEc2CatalogsResponse) Reset() {
	*x = ListEc2CatalogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEc2CatalogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEc2CatalogsResponse) ProtoMessage() {}

func (x *ListEc2CatalogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEc2CatalogsResponse.ProtoReflect.Descriptor instead.
func (*ListEc2CatalogsResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_ec2catalog_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListEc2CatalogsResponse) GetItems() []*resource.Ec2Catalog {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateEc2CatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The request to create an EC2Catalog.  The fields access_key, secret_key, and regions are required.
	// The account_id is a value Watchtower looks up from AWS upon creation and should not be provided.  If rotate is
	// set to true the provided access key will be rotated to ensure only Watchtower knows the AWS secret key.
	Catalog *resource.Ec2Catalog `protobuf:"bytes,1,opt,name=catalog,proto3" json:"catalog,omitempty"`
}

func (x *CreateEc2CatalogRequest) Reset() {
	*x = CreateEc2CatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEc2CatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEc2CatalogRequest) ProtoMessage() {}

func (x *CreateEc2CatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEc2CatalogRequest.ProtoReflect.Descriptor instead.
func (*CreateEc2CatalogRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_ec2catalog_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateEc2CatalogRequest) GetCatalog() *resource.Ec2Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

type CreateEc2CatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Catalog *resource.Ec2Catalog `protobuf:"bytes,2,opt,name=catalog,proto3" json:"catalog,omitempty"`
}

func (x *CreateEc2CatalogResponse) Reset() {
	*x = CreateEc2CatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEc2CatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEc2CatalogResponse) ProtoMessage() {}

func (x *CreateEc2CatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEc2CatalogResponse.ProtoReflect.Descriptor instead.
func (*CreateEc2CatalogResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_ec2catalog_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateEc2CatalogResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateEc2CatalogResponse) GetCatalog() *resource.Ec2Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

type UpdateEc2CatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allows an existing EC2Catalog to be updated.  The field rotate=true requires access_key and secret_key to also be
	// set.  The only stored fields that can be updated with this call are the regions list and
	// the access_key and secret_key.
	// When a new access_key and secret_key are provided, a lookup will happen to verify they are for the same aws account
	// as the previously provided credentials.  If not an error will be returned.
	Catalog    *resource.Ec2Catalog  `protobuf:"bytes,1,opt,name=catalog,proto3" json:"catalog,omitempty"`
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateEc2CatalogRequest) Reset() {
	*x = UpdateEc2CatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEc2CatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEc2CatalogRequest) ProtoMessage() {}

func (x *UpdateEc2CatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEc2CatalogRequest.ProtoReflect.Descriptor instead.
func (*UpdateEc2CatalogRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_ec2catalog_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateEc2CatalogRequest) GetCatalog() *resource.Ec2Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

func (x *UpdateEc2CatalogRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateEc2CatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Catalog *resource.Ec2Catalog `protobuf:"bytes,1,opt,name=catalog,proto3" json:"catalog,omitempty"`
}

func (x *UpdateEc2CatalogResponse) Reset() {
	*x = UpdateEc2CatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEc2CatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEc2CatalogResponse) ProtoMessage() {}

func (x *UpdateEc2CatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEc2CatalogResponse.ProtoReflect.Descriptor instead.
func (*UpdateEc2CatalogResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_ec2catalog_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateEc2CatalogResponse) GetCatalog() *resource.Ec2Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

type DeleteEc2CatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteEc2CatalogRequest) Reset() {
	*x = DeleteEc2CatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEc2CatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEc2CatalogRequest) ProtoMessage() {}

func (x *DeleteEc2CatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEc2CatalogRequest.ProtoReflect.Descriptor instead.
func (*DeleteEc2CatalogRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_ec2catalog_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteEc2CatalogRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteEc2CatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Existed bool `protobuf:"varint,1,opt,name=existed,proto3" json:"existed,omitempty"`
}

func (x *DeleteEc2CatalogResponse) Reset() {
	*x = DeleteEc2CatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEc2CatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEc2CatalogResponse) ProtoMessage() {}

func (x *DeleteEc2CatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEc2CatalogResponse.ProtoReflect.Descriptor instead.
func (*DeleteEc2CatalogResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_ec2catalog_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteEc2CatalogResponse) GetExisted() bool {
	if x != nil {
		return x.Existed
	}
	return false
}

type RotateEc2CatalogAccessKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RotateEc2CatalogAccessKeyRequest) Reset() {
	*x = RotateEc2CatalogAccessKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateEc2CatalogAccessKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateEc2CatalogAccessKeyRequest) ProtoMessage() {}

func (x *RotateEc2CatalogAccessKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateEc2CatalogAccessKeyRequest.ProtoReflect.Descriptor instead.
func (*RotateEc2CatalogAccessKeyRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_ec2catalog_service_proto_rawDescGZIP(), []int{10}
}

func (x *RotateEc2CatalogAccessKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RotateEc2CatalogAccessKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RotateEc2CatalogAccessKeyResponse) Reset() {
	*x = RotateEc2CatalogAccessKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateEc2CatalogAccessKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateEc2CatalogAccessKeyResponse) ProtoMessage() {}

func (x *RotateEc2CatalogAccessKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_ec2catalog_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateEc2CatalogAccessKeyResponse.ProtoReflect.Descriptor instead.
func (*RotateEc2CatalogAccessKeyResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_ec2catalog_service_proto_rawDescGZIP(), []int{11}
}

var File_controller_api_v1_ec2catalog_service_proto protoreflect.FileDescriptor

var file_controller_api_v1_ec2catalog_service_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x63, 0x32, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a,
	0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x63, 0x32, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x59, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x48, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x57, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x5b, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x6c, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x98, 0x01, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x5c, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x63,
	0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x34, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x22, 0x32, 0x0a, 0x20, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xbf,
	0x0b, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xdf, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x63, 0x32, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x63,
	0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x63, 0x32, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x62, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x92, 0x41, 0x52, 0x4a, 0x50, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x45, 0x0a, 0x25, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x12, 0x1c, 0x0a, 0x1a, 0x1a, 0x18, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0xd7, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x63,
	0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x63, 0x32, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x92, 0x41, 0x52, 0x4a, 0x50,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x25, 0x54, 0x68, 0x65,
	0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x2e, 0x12, 0x1c, 0x0a, 0x1a, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0xec, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x63, 0x32, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x3a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x62, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x92, 0x41, 0x52, 0x4a, 0x50, 0x0a,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x25, 0x54, 0x68, 0x65, 0x20,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x2e, 0x12, 0x1c, 0x0a, 0x1a, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x95, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x32, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x63, 0x32, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x69, 0x64, 0x7d, 0x3a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5a, 0x22,
	0x32, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x63, 0x32, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x64, 0x7d, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x52, 0x4a, 0x50, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x45, 0x0a, 0x25, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x12, 0x1c, 0x0a, 0x1a, 0x1a, 0x18, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0xdf, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2a, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x63, 0x32, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x52, 0x4a, 0x50, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x45, 0x0a, 0x25, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x12, 0x1c, 0x0a, 0x1a, 0x1a,
	0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x84, 0x02, 0x0a, 0x19, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x45, 0x63, 0x32, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x63, 0x32, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x3a, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x52, 0x4a, 0x50,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x25, 0x54, 0x68, 0x65,
	0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x2e, 0x12, 0x1c, 0x0a, 0x1a, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x42, 0x76, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f,
	0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x3b,
	0x61, 0x70, 0x69, 0x92, 0x41, 0x32, 0x12, 0x2c, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x12, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x32, 0x05, 0x30,
	0x2e, 0x30, 0x2e, 0x31, 0x2a, 0x02, 0x02, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_api_v1_ec2catalog_service_proto_rawDescOnce sync.Once
	file_controller_api_v1_ec2catalog_service_proto_rawDescData = file_controller_api_v1_ec2catalog_service_proto_rawDesc
)

func file_controller_api_v1_ec2catalog_service_proto_rawDescGZIP() []byte {
	file_controller_api_v1_ec2catalog_service_proto_rawDescOnce.Do(func() {
		file_controller_api_v1_ec2catalog_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_api_v1_ec2catalog_service_proto_rawDescData)
	})
	return file_controller_api_v1_ec2catalog_service_proto_rawDescData
}

var file_controller_api_v1_ec2catalog_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_controller_api_v1_ec2catalog_service_proto_goTypes = []interface{}{
	(*GetEc2CatalogRequest)(nil),              // 0: controller.api.v1.GetEc2CatalogRequest
	(*GetEc2CatalogResponse)(nil),             // 1: controller.api.v1.GetEc2CatalogResponse
	(*ListEc2CatalogsRequest)(nil),            // 2: controller.api.v1.ListEc2CatalogsRequest
	(*ListEc2CatalogsResponse)(nil),           // 3: controller.api.v1.ListEc2CatalogsResponse
	(*CreateEc2CatalogRequest)(nil),           // 4: controller.api.v1.CreateEc2CatalogRequest
	(*CreateEc2CatalogResponse)(nil),          // 5: controller.api.v1.CreateEc2CatalogResponse
	(*UpdateEc2CatalogRequest)(nil),           // 6: controller.api.v1.UpdateEc2CatalogRequest
	(*UpdateEc2CatalogResponse)(nil),          // 7: controller.api.v1.UpdateEc2CatalogResponse
	(*DeleteEc2CatalogRequest)(nil),           // 8: controller.api.v1.DeleteEc2CatalogRequest
	(*DeleteEc2CatalogResponse)(nil),          // 9: controller.api.v1.DeleteEc2CatalogResponse
	(*RotateEc2CatalogAccessKeyRequest)(nil),  // 10: controller.api.v1.RotateEc2CatalogAccessKeyRequest
	(*RotateEc2CatalogAccessKeyResponse)(nil), // 11: controller.api.v1.RotateEc2CatalogAccessKeyResponse
	(*resource.Ec2Catalog)(nil),               // 12: controller.api.resource.v1.Ec2Catalog
	(*field_mask.FieldMask)(nil),              // 13: google.protobuf.FieldMask
}
var file_controller_api_v1_ec2catalog_service_proto_depIdxs = []int32{
	12, // 0: controller.api.v1.GetEc2CatalogResponse.catalog:type_name -> controller.api.resource.v1.Ec2Catalog
	12, // 1: controller.api.v1.ListEc2CatalogsResponse.items:type_name -> controller.api.resource.v1.Ec2Catalog
	12, // 2: controller.api.v1.CreateEc2CatalogRequest.catalog:type_name -> controller.api.resource.v1.Ec2Catalog
	12, // 3: controller.api.v1.CreateEc2CatalogResponse.catalog:type_name -> controller.api.resource.v1.Ec2Catalog
	12, // 4: controller.api.v1.UpdateEc2CatalogRequest.catalog:type_name -> controller.api.resource.v1.Ec2Catalog
	13, // 5: controller.api.v1.UpdateEc2CatalogRequest.update_mask:type_name -> google.protobuf.FieldMask
	12, // 6: controller.api.v1.UpdateEc2CatalogResponse.catalog:type_name -> controller.api.resource.v1.Ec2Catalog
	0,  // 7: controller.api.v1.ControllerService.GetEc2Catalog:input_type -> controller.api.v1.GetEc2CatalogRequest
	2,  // 8: controller.api.v1.ControllerService.ListEc2Catalogs:input_type -> controller.api.v1.ListEc2CatalogsRequest
	4,  // 9: controller.api.v1.ControllerService.CreateEc2Catalog:input_type -> controller.api.v1.CreateEc2CatalogRequest
	6,  // 10: controller.api.v1.ControllerService.UpdateEc2Catalog:input_type -> controller.api.v1.UpdateEc2CatalogRequest
	8,  // 11: controller.api.v1.ControllerService.DeleteEc2Catalog:input_type -> controller.api.v1.DeleteEc2CatalogRequest
	10, // 12: controller.api.v1.ControllerService.RotateEc2CatalogAccessKey:input_type -> controller.api.v1.RotateEc2CatalogAccessKeyRequest
	1,  // 13: controller.api.v1.ControllerService.GetEc2Catalog:output_type -> controller.api.v1.GetEc2CatalogResponse
	3,  // 14: controller.api.v1.ControllerService.ListEc2Catalogs:output_type -> controller.api.v1.ListEc2CatalogsResponse
	5,  // 15: controller.api.v1.ControllerService.CreateEc2Catalog:output_type -> controller.api.v1.CreateEc2CatalogResponse
	7,  // 16: controller.api.v1.ControllerService.UpdateEc2Catalog:output_type -> controller.api.v1.UpdateEc2CatalogResponse
	9,  // 17: controller.api.v1.ControllerService.DeleteEc2Catalog:output_type -> controller.api.v1.DeleteEc2CatalogResponse
	11, // 18: controller.api.v1.ControllerService.RotateEc2CatalogAccessKey:output_type -> controller.api.v1.RotateEc2CatalogAccessKeyResponse
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_controller_api_v1_ec2catalog_service_proto_init() }
func file_controller_api_v1_ec2catalog_service_proto_init() {
	if File_controller_api_v1_ec2catalog_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_controller_api_v1_ec2catalog_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEc2CatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_ec2catalog_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEc2CatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_ec2catalog_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEc2CatalogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_ec2catalog_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEc2CatalogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_ec2catalog_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEc2CatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_ec2catalog_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEc2CatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_ec2catalog_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEc2CatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_ec2catalog_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEc2CatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_ec2catalog_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEc2CatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_ec2catalog_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEc2CatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_ec2catalog_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateEc2CatalogAccessKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_ec2catalog_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateEc2CatalogAccessKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_api_v1_ec2catalog_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_api_v1_ec2catalog_service_proto_goTypes,
		DependencyIndexes: file_controller_api_v1_ec2catalog_service_proto_depIdxs,
		MessageInfos:      file_controller_api_v1_ec2catalog_service_proto_msgTypes,
	}.Build()
	File_controller_api_v1_ec2catalog_service_proto = out.File
	file_controller_api_v1_ec2catalog_service_proto_rawDesc = nil
	file_controller_api_v1_ec2catalog_service_proto_goTypes = nil
	file_controller_api_v1_ec2catalog_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ControllerServiceClient is the client API for ControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerServiceClient interface {
	// Retrieves an EC2Catalog using the provided id or friendly name.
	GetEc2Catalog(ctx context.Context, in *GetEc2CatalogRequest, opts ...grpc.CallOption) (*GetEc2CatalogResponse, error)
	// Lists the EC2Catalogs known to Watchtower.
	ListEc2Catalogs(ctx context.Context, in *ListEc2CatalogsRequest, opts ...grpc.CallOption) (*ListEc2CatalogsResponse, error)
	// Creates an EC2Catalog.  Verification of the provided credentials and account/region mapping is done
	// at the time this is called.  If this returns without an error the structure of the Catalog has been verified.
	CreateEc2Catalog(ctx context.Context, in *CreateEc2CatalogRequest, opts ...grpc.CallOption) (*CreateEc2CatalogResponse, error)
	UpdateEc2Catalog(ctx context.Context, in *UpdateEc2CatalogRequest, opts ...grpc.CallOption) (*UpdateEc2CatalogResponse, error)
	DeleteEc2Catalog(ctx context.Context, in *DeleteEc2CatalogRequest, opts ...grpc.CallOption) (*DeleteEc2CatalogResponse, error)
	RotateEc2CatalogAccessKey(ctx context.Context, in *RotateEc2CatalogAccessKeyRequest, opts ...grpc.CallOption) (*RotateEc2CatalogAccessKeyResponse, error)
}

type controllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerServiceClient(cc grpc.ClientConnInterface) ControllerServiceClient {
	return &controllerServiceClient{cc}
}

func (c *controllerServiceClient) GetEc2Catalog(ctx context.Context, in *GetEc2CatalogRequest, opts ...grpc.CallOption) (*GetEc2CatalogResponse, error) {
	out := new(GetEc2CatalogResponse)
	err := c.cc.Invoke(ctx, "/controller.api.v1.ControllerService/GetEc2Catalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ListEc2Catalogs(ctx context.Context, in *ListEc2CatalogsRequest, opts ...grpc.CallOption) (*ListEc2CatalogsResponse, error) {
	out := new(ListEc2CatalogsResponse)
	err := c.cc.Invoke(ctx, "/controller.api.v1.ControllerService/ListEc2Catalogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) CreateEc2Catalog(ctx context.Context, in *CreateEc2CatalogRequest, opts ...grpc.CallOption) (*CreateEc2CatalogResponse, error) {
	out := new(CreateEc2CatalogResponse)
	err := c.cc.Invoke(ctx, "/controller.api.v1.ControllerService/CreateEc2Catalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) UpdateEc2Catalog(ctx context.Context, in *UpdateEc2CatalogRequest, opts ...grpc.CallOption) (*UpdateEc2CatalogResponse, error) {
	out := new(UpdateEc2CatalogResponse)
	err := c.cc.Invoke(ctx, "/controller.api.v1.ControllerService/UpdateEc2Catalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeleteEc2Catalog(ctx context.Context, in *DeleteEc2CatalogRequest, opts ...grpc.CallOption) (*DeleteEc2CatalogResponse, error) {
	out := new(DeleteEc2CatalogResponse)
	err := c.cc.Invoke(ctx, "/controller.api.v1.ControllerService/DeleteEc2Catalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) RotateEc2CatalogAccessKey(ctx context.Context, in *RotateEc2CatalogAccessKeyRequest, opts ...grpc.CallOption) (*RotateEc2CatalogAccessKeyResponse, error) {
	out := new(RotateEc2CatalogAccessKeyResponse)
	err := c.cc.Invoke(ctx, "/controller.api.v1.ControllerService/RotateEc2CatalogAccessKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServiceServer is the server API for ControllerService service.
type ControllerServiceServer interface {
	// Retrieves an EC2Catalog using the provided id or friendly name.
	GetEc2Catalog(context.Context, *GetEc2CatalogRequest) (*GetEc2CatalogResponse, error)
	// Lists the EC2Catalogs known to Watchtower.
	ListEc2Catalogs(context.Context, *ListEc2CatalogsRequest) (*ListEc2CatalogsResponse, error)
	// Creates an EC2Catalog.  Verification of the provided credentials and account/region mapping is done
	// at the time this is called.  If this returns without an error the structure of the Catalog has been verified.
	CreateEc2Catalog(context.Context, *CreateEc2CatalogRequest) (*CreateEc2CatalogResponse, error)
	UpdateEc2Catalog(context.Context, *UpdateEc2CatalogRequest) (*UpdateEc2CatalogResponse, error)
	DeleteEc2Catalog(context.Context, *DeleteEc2CatalogRequest) (*DeleteEc2CatalogResponse, error)
	RotateEc2CatalogAccessKey(context.Context, *RotateEc2CatalogAccessKeyRequest) (*RotateEc2CatalogAccessKeyResponse, error)
}

// UnimplementedControllerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServiceServer struct {
}

func (*UnimplementedControllerServiceServer) GetEc2Catalog(context.Context, *GetEc2CatalogRequest) (*GetEc2CatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEc2Catalog not implemented")
}
func (*UnimplementedControllerServiceServer) ListEc2Catalogs(context.Context, *ListEc2CatalogsRequest) (*ListEc2CatalogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEc2Catalogs not implemented")
}
func (*UnimplementedControllerServiceServer) CreateEc2Catalog(context.Context, *CreateEc2CatalogRequest) (*CreateEc2CatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEc2Catalog not implemented")
}
func (*UnimplementedControllerServiceServer) UpdateEc2Catalog(context.Context, *UpdateEc2CatalogRequest) (*UpdateEc2CatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEc2Catalog not implemented")
}
func (*UnimplementedControllerServiceServer) DeleteEc2Catalog(context.Context, *DeleteEc2CatalogRequest) (*DeleteEc2CatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEc2Catalog not implemented")
}
func (*UnimplementedControllerServiceServer) RotateEc2CatalogAccessKey(context.Context, *RotateEc2CatalogAccessKeyRequest) (*RotateEc2CatalogAccessKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateEc2CatalogAccessKey not implemented")
}

func RegisterControllerServiceServer(s *grpc.Server, srv ControllerServiceServer) {
	s.RegisterService(&_ControllerService_serviceDesc, srv)
}

func _ControllerService_GetEc2Catalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEc2CatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetEc2Catalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.v1.ControllerService/GetEc2Catalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetEc2Catalog(ctx, req.(*GetEc2CatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ListEc2Catalogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEc2CatalogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ListEc2Catalogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.v1.ControllerService/ListEc2Catalogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ListEc2Catalogs(ctx, req.(*ListEc2CatalogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_CreateEc2Catalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEc2CatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CreateEc2Catalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.v1.ControllerService/CreateEc2Catalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CreateEc2Catalog(ctx, req.(*CreateEc2CatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_UpdateEc2Catalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEc2CatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).UpdateEc2Catalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.v1.ControllerService/UpdateEc2Catalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).UpdateEc2Catalog(ctx, req.(*UpdateEc2CatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeleteEc2Catalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEc2CatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeleteEc2Catalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.v1.ControllerService/DeleteEc2Catalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeleteEc2Catalog(ctx, req.(*DeleteEc2CatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_RotateEc2CatalogAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateEc2CatalogAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).RotateEc2CatalogAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.v1.ControllerService/RotateEc2CatalogAccessKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).RotateEc2CatalogAccessKey(ctx, req.(*RotateEc2CatalogAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controller.api.v1.ControllerService",
	HandlerType: (*ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEc2Catalog",
			Handler:    _ControllerService_GetEc2Catalog_Handler,
		},
		{
			MethodName: "ListEc2Catalogs",
			Handler:    _ControllerService_ListEc2Catalogs_Handler,
		},
		{
			MethodName: "CreateEc2Catalog",
			Handler:    _ControllerService_CreateEc2Catalog_Handler,
		},
		{
			MethodName: "UpdateEc2Catalog",
			Handler:    _ControllerService_UpdateEc2Catalog_Handler,
		},
		{
			MethodName: "DeleteEc2Catalog",
			Handler:    _ControllerService_DeleteEc2Catalog_Handler,
		},
		{
			MethodName: "RotateEc2CatalogAccessKey",
			Handler:    _ControllerService_RotateEc2CatalogAccessKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller/api/v1/ec2catalog_service.proto",
}
