// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: controller/api/v1/host_catalog_service.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	resource "github.com/hashicorp/watchtower/internal/gen/controller/api/resource"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type HostCatalogView int32

const (
	HostCatalogView_HOST_CATALOG_VIEW_UNSPECIFIED HostCatalogView = 0
	HostCatalogView_HOST_CATALOG_VIEW_BASIC       HostCatalogView = 1
	HostCatalogView_HOST_CATALOG_VIEW_FULL        HostCatalogView = 2
)

// Enum value maps for HostCatalogView.
var (
	HostCatalogView_name = map[int32]string{
		0: "HOST_CATALOG_VIEW_UNSPECIFIED",
		1: "HOST_CATALOG_VIEW_BASIC",
		2: "HOST_CATALOG_VIEW_FULL",
	}
	HostCatalogView_value = map[string]int32{
		"HOST_CATALOG_VIEW_UNSPECIFIED": 0,
		"HOST_CATALOG_VIEW_BASIC":       1,
		"HOST_CATALOG_VIEW_FULL":        2,
	}
)

func (x HostCatalogView) Enum() *HostCatalogView {
	p := new(HostCatalogView)
	*p = x
	return p
}

func (x HostCatalogView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostCatalogView) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_api_v1_host_catalog_service_proto_enumTypes[0].Descriptor()
}

func (HostCatalogView) Type() protoreflect.EnumType {
	return &file_controller_api_v1_host_catalog_service_proto_enumTypes[0]
}

func (x HostCatalogView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostCatalogView.Descriptor instead.
func (HostCatalogView) EnumDescriptor() ([]byte, []int) {
	return file_controller_api_v1_host_catalog_service_proto_rawDescGZIP(), []int{0}
}

type GetHostCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: Colapse this down into a single uri field once we figure out how to generate good swagger where the full
	// uri is declared in a single field.
	Org     string          `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	Project string          `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Id      string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	View    HostCatalogView `protobuf:"varint,4,opt,name=view,proto3,enum=controller.api.v1.HostCatalogView" json:"view,omitempty"`
}

func (x *GetHostCatalogRequest) Reset() {
	*x = GetHostCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostCatalogRequest) ProtoMessage() {}

func (x *GetHostCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostCatalogRequest.ProtoReflect.Descriptor instead.
func (*GetHostCatalogRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_catalog_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetHostCatalogRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GetHostCatalogRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GetHostCatalogRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetHostCatalogRequest) GetView() HostCatalogView {
	if x != nil {
		return x.View
	}
	return HostCatalogView_HOST_CATALOG_VIEW_UNSPECIFIED
}

type GetHostCatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *resource.HostCatalog `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetHostCatalogResponse) Reset() {
	*x = GetHostCatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostCatalogResponse) ProtoMessage() {}

func (x *GetHostCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostCatalogResponse.ProtoReflect.Descriptor instead.
func (*GetHostCatalogResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_catalog_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetHostCatalogResponse) GetItem() *resource.HostCatalog {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListHostCatalogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org               string          `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	Project           string          `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	IgnoreResultLimit bool            `protobuf:"varint,3,opt,name=ignore_result_limit,json=ignoreResultLimit,proto3" json:"ignore_result_limit,omitempty"`
	View              HostCatalogView `protobuf:"varint,4,opt,name=view,proto3,enum=controller.api.v1.HostCatalogView" json:"view,omitempty"`
}

func (x *ListHostCatalogsRequest) Reset() {
	*x = ListHostCatalogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHostCatalogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostCatalogsRequest) ProtoMessage() {}

func (x *ListHostCatalogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostCatalogsRequest.ProtoReflect.Descriptor instead.
func (*ListHostCatalogsRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_catalog_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListHostCatalogsRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *ListHostCatalogsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ListHostCatalogsRequest) GetIgnoreResultLimit() bool {
	if x != nil {
		return x.IgnoreResultLimit
	}
	return false
}

func (x *ListHostCatalogsRequest) GetView() HostCatalogView {
	if x != nil {
		return x.View
	}
	return HostCatalogView_HOST_CATALOG_VIEW_UNSPECIFIED
}

type ListHostCatalogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*resource.HostCatalogResult `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListHostCatalogsResponse) Reset() {
	*x = ListHostCatalogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHostCatalogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostCatalogsResponse) ProtoMessage() {}

func (x *ListHostCatalogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostCatalogsResponse.ProtoReflect.Descriptor instead.
func (*ListHostCatalogsResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_catalog_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListHostCatalogsResponse) GetItems() []*resource.HostCatalogResult {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateHostCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org     string                `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	Project string                `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Item    *resource.HostCatalog `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateHostCatalogRequest) Reset() {
	*x = CreateHostCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostCatalogRequest) ProtoMessage() {}

func (x *CreateHostCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostCatalogRequest.ProtoReflect.Descriptor instead.
func (*CreateHostCatalogRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_catalog_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateHostCatalogRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *CreateHostCatalogRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *CreateHostCatalogRequest) GetItem() *resource.HostCatalog {
	if x != nil {
		return x.Item
	}
	return nil
}

type CreateHostCatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri  string                      `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Item *resource.HostCatalogResult `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateHostCatalogResponse) Reset() {
	*x = CreateHostCatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostCatalogResponse) ProtoMessage() {}

func (x *CreateHostCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostCatalogResponse.ProtoReflect.Descriptor instead.
func (*CreateHostCatalogResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_catalog_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateHostCatalogResponse) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *CreateHostCatalogResponse) GetItem() *resource.HostCatalogResult {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdateHostCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org        string                `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	Project    string                `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Id         string                `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Item       *resource.HostCatalog `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,5,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateHostCatalogRequest) Reset() {
	*x = UpdateHostCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHostCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostCatalogRequest) ProtoMessage() {}

func (x *UpdateHostCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostCatalogRequest.ProtoReflect.Descriptor instead.
func (*UpdateHostCatalogRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_catalog_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateHostCatalogRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *UpdateHostCatalogRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *UpdateHostCatalogRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateHostCatalogRequest) GetItem() *resource.HostCatalog {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *UpdateHostCatalogRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateHostCatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *resource.HostCatalogResult `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *UpdateHostCatalogResponse) Reset() {
	*x = UpdateHostCatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHostCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostCatalogResponse) ProtoMessage() {}

func (x *UpdateHostCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostCatalogResponse.ProtoReflect.Descriptor instead.
func (*UpdateHostCatalogResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_catalog_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateHostCatalogResponse) GetItem() *resource.HostCatalogResult {
	if x != nil {
		return x.Item
	}
	return nil
}

type DeleteHostCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org     string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Id      string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteHostCatalogRequest) Reset() {
	*x = DeleteHostCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHostCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHostCatalogRequest) ProtoMessage() {}

func (x *DeleteHostCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHostCatalogRequest.ProtoReflect.Descriptor instead.
func (*DeleteHostCatalogRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_catalog_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteHostCatalogRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *DeleteHostCatalogRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *DeleteHostCatalogRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteHostCatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Existed bool `protobuf:"varint,1,opt,name=existed,proto3" json:"existed,omitempty"`
}

func (x *DeleteHostCatalogResponse) Reset() {
	*x = DeleteHostCatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHostCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHostCatalogResponse) ProtoMessage() {}

func (x *DeleteHostCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_catalog_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHostCatalogResponse.ProtoReflect.Descriptor instead.
func (*DeleteHostCatalogResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_catalog_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteHostCatalogResponse) GetExisted() bool {
	if x != nil {
		return x.Existed
	}
	return false
}

var File_controller_api_v1_host_catalog_service_proto protoreflect.FileDescriptor

var file_controller_api_v1_host_catalog_service_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x55, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x22, 0xad, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x22, 0x5f, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6f, 0x72, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3b, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x70, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x41, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xd0, 0x01, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22,
	0x5e, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0x56, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x2a, 0x6d,
	0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f,
	0x47, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x54,
	0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f,
	0x47, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x32, 0xde, 0x0a,
	0x0a, 0x12, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xfd, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x62, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x92,
	0x41, 0x52, 0x4a, 0x50, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a,
	0x25, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x12, 0x1c, 0x0a, 0x1a, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0xf8, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x92, 0x41, 0x52, 0x4a, 0x50, 0x0a,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x25, 0x54, 0x68, 0x65, 0x20,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x2e, 0x12, 0x1c, 0x0a, 0x1a, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x87, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x96, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x3a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x62, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x92, 0x41, 0x52, 0x4a, 0x50, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x45, 0x0a, 0x25, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x12, 0x1c, 0x0a, 0x1a, 0x1a,
	0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0xbf, 0x02, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12,
	0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xce, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x73, 0x32, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x5a, 0x37, 0x32,
	0x32, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x52, 0x4a, 0x50, 0x0a, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x25, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x12, 0x1c, 0x0a,
	0x1a, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x80, 0x02, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x2a, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x52, 0x4a, 0x50, 0x0a, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x25, 0x54, 0x68, 0x65, 0x20, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e,
	0x12, 0x1c, 0x0a, 0x1a, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x41,
	0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x70,
	0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_api_v1_host_catalog_service_proto_rawDescOnce sync.Once
	file_controller_api_v1_host_catalog_service_proto_rawDescData = file_controller_api_v1_host_catalog_service_proto_rawDesc
)

func file_controller_api_v1_host_catalog_service_proto_rawDescGZIP() []byte {
	file_controller_api_v1_host_catalog_service_proto_rawDescOnce.Do(func() {
		file_controller_api_v1_host_catalog_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_api_v1_host_catalog_service_proto_rawDescData)
	})
	return file_controller_api_v1_host_catalog_service_proto_rawDescData
}

var file_controller_api_v1_host_catalog_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_controller_api_v1_host_catalog_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_controller_api_v1_host_catalog_service_proto_goTypes = []interface{}{
	(HostCatalogView)(0),               // 0: controller.api.v1.HostCatalogView
	(*GetHostCatalogRequest)(nil),      // 1: controller.api.v1.GetHostCatalogRequest
	(*GetHostCatalogResponse)(nil),     // 2: controller.api.v1.GetHostCatalogResponse
	(*ListHostCatalogsRequest)(nil),    // 3: controller.api.v1.ListHostCatalogsRequest
	(*ListHostCatalogsResponse)(nil),   // 4: controller.api.v1.ListHostCatalogsResponse
	(*CreateHostCatalogRequest)(nil),   // 5: controller.api.v1.CreateHostCatalogRequest
	(*CreateHostCatalogResponse)(nil),  // 6: controller.api.v1.CreateHostCatalogResponse
	(*UpdateHostCatalogRequest)(nil),   // 7: controller.api.v1.UpdateHostCatalogRequest
	(*UpdateHostCatalogResponse)(nil),  // 8: controller.api.v1.UpdateHostCatalogResponse
	(*DeleteHostCatalogRequest)(nil),   // 9: controller.api.v1.DeleteHostCatalogRequest
	(*DeleteHostCatalogResponse)(nil),  // 10: controller.api.v1.DeleteHostCatalogResponse
	(*resource.HostCatalog)(nil),       // 11: controller.api.resource.v1.HostCatalog
	(*resource.HostCatalogResult)(nil), // 12: controller.api.resource.v1.HostCatalogResult
	(*field_mask.FieldMask)(nil),       // 13: google.protobuf.FieldMask
}
var file_controller_api_v1_host_catalog_service_proto_depIdxs = []int32{
	0,  // 0: controller.api.v1.GetHostCatalogRequest.view:type_name -> controller.api.v1.HostCatalogView
	11, // 1: controller.api.v1.GetHostCatalogResponse.item:type_name -> controller.api.resource.v1.HostCatalog
	0,  // 2: controller.api.v1.ListHostCatalogsRequest.view:type_name -> controller.api.v1.HostCatalogView
	12, // 3: controller.api.v1.ListHostCatalogsResponse.items:type_name -> controller.api.resource.v1.HostCatalogResult
	11, // 4: controller.api.v1.CreateHostCatalogRequest.item:type_name -> controller.api.resource.v1.HostCatalog
	12, // 5: controller.api.v1.CreateHostCatalogResponse.item:type_name -> controller.api.resource.v1.HostCatalogResult
	11, // 6: controller.api.v1.UpdateHostCatalogRequest.item:type_name -> controller.api.resource.v1.HostCatalog
	13, // 7: controller.api.v1.UpdateHostCatalogRequest.update_mask:type_name -> google.protobuf.FieldMask
	12, // 8: controller.api.v1.UpdateHostCatalogResponse.item:type_name -> controller.api.resource.v1.HostCatalogResult
	1,  // 9: controller.api.v1.HostCatalogService.GetHostCatalog:input_type -> controller.api.v1.GetHostCatalogRequest
	3,  // 10: controller.api.v1.HostCatalogService.ListHostCatalogs:input_type -> controller.api.v1.ListHostCatalogsRequest
	5,  // 11: controller.api.v1.HostCatalogService.CreateHostCatalog:input_type -> controller.api.v1.CreateHostCatalogRequest
	7,  // 12: controller.api.v1.HostCatalogService.UpdateHostCatalog:input_type -> controller.api.v1.UpdateHostCatalogRequest
	9,  // 13: controller.api.v1.HostCatalogService.DeleteHostCatalog:input_type -> controller.api.v1.DeleteHostCatalogRequest
	2,  // 14: controller.api.v1.HostCatalogService.GetHostCatalog:output_type -> controller.api.v1.GetHostCatalogResponse
	4,  // 15: controller.api.v1.HostCatalogService.ListHostCatalogs:output_type -> controller.api.v1.ListHostCatalogsResponse
	6,  // 16: controller.api.v1.HostCatalogService.CreateHostCatalog:output_type -> controller.api.v1.CreateHostCatalogResponse
	8,  // 17: controller.api.v1.HostCatalogService.UpdateHostCatalog:output_type -> controller.api.v1.UpdateHostCatalogResponse
	10, // 18: controller.api.v1.HostCatalogService.DeleteHostCatalog:output_type -> controller.api.v1.DeleteHostCatalogResponse
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_controller_api_v1_host_catalog_service_proto_init() }
func file_controller_api_v1_host_catalog_service_proto_init() {
	if File_controller_api_v1_host_catalog_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_controller_api_v1_host_catalog_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_catalog_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostCatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_catalog_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHostCatalogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_catalog_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHostCatalogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_catalog_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_catalog_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostCatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_catalog_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHostCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_catalog_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHostCatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_catalog_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHostCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_catalog_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHostCatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_api_v1_host_catalog_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_api_v1_host_catalog_service_proto_goTypes,
		DependencyIndexes: file_controller_api_v1_host_catalog_service_proto_depIdxs,
		EnumInfos:         file_controller_api_v1_host_catalog_service_proto_enumTypes,
		MessageInfos:      file_controller_api_v1_host_catalog_service_proto_msgTypes,
	}.Build()
	File_controller_api_v1_host_catalog_service_proto = out.File
	file_controller_api_v1_host_catalog_service_proto_rawDesc = nil
	file_controller_api_v1_host_catalog_service_proto_goTypes = nil
	file_controller_api_v1_host_catalog_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HostCatalogServiceClient is the client API for HostCatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HostCatalogServiceClient interface {
	GetHostCatalog(ctx context.Context, in *GetHostCatalogRequest, opts ...grpc.CallOption) (*GetHostCatalogResponse, error)
	ListHostCatalogs(ctx context.Context, in *ListHostCatalogsRequest, opts ...grpc.CallOption) (*ListHostCatalogsResponse, error)
	CreateHostCatalog(ctx context.Context, in *CreateHostCatalogRequest, opts ...grpc.CallOption) (*CreateHostCatalogResponse, error)
	UpdateHostCatalog(ctx context.Context, in *UpdateHostCatalogRequest, opts ...grpc.CallOption) (*UpdateHostCatalogResponse, error)
	DeleteHostCatalog(ctx context.Context, in *DeleteHostCatalogRequest, opts ...grpc.CallOption) (*DeleteHostCatalogResponse, error)
}

type hostCatalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostCatalogServiceClient(cc grpc.ClientConnInterface) HostCatalogServiceClient {
	return &hostCatalogServiceClient{cc}
}

func (c *hostCatalogServiceClient) GetHostCatalog(ctx context.Context, in *GetHostCatalogRequest, opts ...grpc.CallOption) (*GetHostCatalogResponse, error) {
	out := new(GetHostCatalogResponse)
	err := c.cc.Invoke(ctx, "/controller.api.v1.HostCatalogService/GetHostCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostCatalogServiceClient) ListHostCatalogs(ctx context.Context, in *ListHostCatalogsRequest, opts ...grpc.CallOption) (*ListHostCatalogsResponse, error) {
	out := new(ListHostCatalogsResponse)
	err := c.cc.Invoke(ctx, "/controller.api.v1.HostCatalogService/ListHostCatalogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostCatalogServiceClient) CreateHostCatalog(ctx context.Context, in *CreateHostCatalogRequest, opts ...grpc.CallOption) (*CreateHostCatalogResponse, error) {
	out := new(CreateHostCatalogResponse)
	err := c.cc.Invoke(ctx, "/controller.api.v1.HostCatalogService/CreateHostCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostCatalogServiceClient) UpdateHostCatalog(ctx context.Context, in *UpdateHostCatalogRequest, opts ...grpc.CallOption) (*UpdateHostCatalogResponse, error) {
	out := new(UpdateHostCatalogResponse)
	err := c.cc.Invoke(ctx, "/controller.api.v1.HostCatalogService/UpdateHostCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostCatalogServiceClient) DeleteHostCatalog(ctx context.Context, in *DeleteHostCatalogRequest, opts ...grpc.CallOption) (*DeleteHostCatalogResponse, error) {
	out := new(DeleteHostCatalogResponse)
	err := c.cc.Invoke(ctx, "/controller.api.v1.HostCatalogService/DeleteHostCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostCatalogServiceServer is the server API for HostCatalogService service.
type HostCatalogServiceServer interface {
	GetHostCatalog(context.Context, *GetHostCatalogRequest) (*GetHostCatalogResponse, error)
	ListHostCatalogs(context.Context, *ListHostCatalogsRequest) (*ListHostCatalogsResponse, error)
	CreateHostCatalog(context.Context, *CreateHostCatalogRequest) (*CreateHostCatalogResponse, error)
	UpdateHostCatalog(context.Context, *UpdateHostCatalogRequest) (*UpdateHostCatalogResponse, error)
	DeleteHostCatalog(context.Context, *DeleteHostCatalogRequest) (*DeleteHostCatalogResponse, error)
}

// UnimplementedHostCatalogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHostCatalogServiceServer struct {
}

func (*UnimplementedHostCatalogServiceServer) GetHostCatalog(context.Context, *GetHostCatalogRequest) (*GetHostCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostCatalog not implemented")
}
func (*UnimplementedHostCatalogServiceServer) ListHostCatalogs(context.Context, *ListHostCatalogsRequest) (*ListHostCatalogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHostCatalogs not implemented")
}
func (*UnimplementedHostCatalogServiceServer) CreateHostCatalog(context.Context, *CreateHostCatalogRequest) (*CreateHostCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostCatalog not implemented")
}
func (*UnimplementedHostCatalogServiceServer) UpdateHostCatalog(context.Context, *UpdateHostCatalogRequest) (*UpdateHostCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostCatalog not implemented")
}
func (*UnimplementedHostCatalogServiceServer) DeleteHostCatalog(context.Context, *DeleteHostCatalogRequest) (*DeleteHostCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostCatalog not implemented")
}

func RegisterHostCatalogServiceServer(s *grpc.Server, srv HostCatalogServiceServer) {
	s.RegisterService(&_HostCatalogService_serviceDesc, srv)
}

func _HostCatalogService_GetHostCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCatalogServiceServer).GetHostCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.v1.HostCatalogService/GetHostCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCatalogServiceServer).GetHostCatalog(ctx, req.(*GetHostCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostCatalogService_ListHostCatalogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostCatalogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCatalogServiceServer).ListHostCatalogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.v1.HostCatalogService/ListHostCatalogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCatalogServiceServer).ListHostCatalogs(ctx, req.(*ListHostCatalogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostCatalogService_CreateHostCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCatalogServiceServer).CreateHostCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.v1.HostCatalogService/CreateHostCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCatalogServiceServer).CreateHostCatalog(ctx, req.(*CreateHostCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostCatalogService_UpdateHostCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCatalogServiceServer).UpdateHostCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.v1.HostCatalogService/UpdateHostCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCatalogServiceServer).UpdateHostCatalog(ctx, req.(*UpdateHostCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostCatalogService_DeleteHostCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCatalogServiceServer).DeleteHostCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.v1.HostCatalogService/DeleteHostCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCatalogServiceServer).DeleteHostCatalog(ctx, req.(*DeleteHostCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HostCatalogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controller.api.v1.HostCatalogService",
	HandlerType: (*HostCatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostCatalog",
			Handler:    _HostCatalogService_GetHostCatalog_Handler,
		},
		{
			MethodName: "ListHostCatalogs",
			Handler:    _HostCatalogService_ListHostCatalogs_Handler,
		},
		{
			MethodName: "CreateHostCatalog",
			Handler:    _HostCatalogService_CreateHostCatalog_Handler,
		},
		{
			MethodName: "UpdateHostCatalog",
			Handler:    _HostCatalogService_UpdateHostCatalog_Handler,
		},
		{
			MethodName: "DeleteHostCatalog",
			Handler:    _HostCatalogService_DeleteHostCatalog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller/api/v1/host_catalog_service.proto",
}
