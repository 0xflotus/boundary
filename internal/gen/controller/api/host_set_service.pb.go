// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: controller/api/v1/host_set_service.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	resource "github.com/hashicorp/watchtower/internal/gen/controller/api/resource"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type HostSetView int32

const (
	HostSetView_HOST_SET_VIEW_UNSPECIFIED HostSetView = 0
	HostSetView_HOST_SET_VIEW_BASIC       HostSetView = 1
	HostSetView_HOST_SET_VIEW_FULL        HostSetView = 2
)

// Enum value maps for HostSetView.
var (
	HostSetView_name = map[int32]string{
		0: "HOST_SET_VIEW_UNSPECIFIED",
		1: "HOST_SET_VIEW_BASIC",
		2: "HOST_SET_VIEW_FULL",
	}
	HostSetView_value = map[string]int32{
		"HOST_SET_VIEW_UNSPECIFIED": 0,
		"HOST_SET_VIEW_BASIC":       1,
		"HOST_SET_VIEW_FULL":        2,
	}
)

func (x HostSetView) Enum() *HostSetView {
	p := new(HostSetView)
	*p = x
	return p
}

func (x HostSetView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostSetView) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_api_v1_host_set_service_proto_enumTypes[0].Descriptor()
}

func (HostSetView) Type() protoreflect.EnumType {
	return &file_controller_api_v1_host_set_service_proto_enumTypes[0]
}

func (x HostSetView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostSetView.Descriptor instead.
func (HostSetView) EnumDescriptor() ([]byte, []int) {
	return file_controller_api_v1_host_set_service_proto_rawDescGZIP(), []int{0}
}

type GetHostSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org     string      `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	Project string      `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Id      string      `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	View    HostSetView `protobuf:"varint,4,opt,name=view,proto3,enum=controller.api.v1.HostSetView" json:"view,omitempty"`
}

func (x *GetHostSetRequest) Reset() {
	*x = GetHostSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_set_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostSetRequest) ProtoMessage() {}

func (x *GetHostSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_set_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostSetRequest.ProtoReflect.Descriptor instead.
func (*GetHostSetRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_set_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetHostSetRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GetHostSetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GetHostSetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetHostSetRequest) GetView() HostSetView {
	if x != nil {
		return x.View
	}
	return HostSetView_HOST_SET_VIEW_UNSPECIFIED
}

type GetHostSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *resource.HostSet `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *GetHostSetResponse) Reset() {
	*x = GetHostSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_set_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostSetResponse) ProtoMessage() {}

func (x *GetHostSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_set_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostSetResponse.ProtoReflect.Descriptor instead.
func (*GetHostSetResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_set_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetHostSetResponse) GetItem() *resource.HostSet {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListHostSetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org               string      `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	Project           string      `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	IgnoreResultLimit bool        `protobuf:"varint,3,opt,name=ignore_result_limit,json=ignoreResultLimit,proto3" json:"ignore_result_limit,omitempty"`
	View              HostSetView `protobuf:"varint,4,opt,name=view,proto3,enum=controller.api.v1.HostSetView" json:"view,omitempty"`
}

func (x *ListHostSetsRequest) Reset() {
	*x = ListHostSetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_set_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHostSetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostSetsRequest) ProtoMessage() {}

func (x *ListHostSetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_set_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostSetsRequest.ProtoReflect.Descriptor instead.
func (*ListHostSetsRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_set_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListHostSetsRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *ListHostSetsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ListHostSetsRequest) GetIgnoreResultLimit() bool {
	if x != nil {
		return x.IgnoreResultLimit
	}
	return false
}

func (x *ListHostSetsRequest) GetView() HostSetView {
	if x != nil {
		return x.View
	}
	return HostSetView_HOST_SET_VIEW_UNSPECIFIED
}

type ListHostSetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*resource.HostSet `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListHostSetsResponse) Reset() {
	*x = ListHostSetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_set_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHostSetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostSetsResponse) ProtoMessage() {}

func (x *ListHostSetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_set_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostSetsResponse.ProtoReflect.Descriptor instead.
func (*ListHostSetsResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_set_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListHostSetsResponse) GetItems() []*resource.HostSet {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateHostSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org     string            `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	Project string            `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Item    *resource.HostSet `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateHostSetRequest) Reset() {
	*x = CreateHostSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_set_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostSetRequest) ProtoMessage() {}

func (x *CreateHostSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_set_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostSetRequest.ProtoReflect.Descriptor instead.
func (*CreateHostSetRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_set_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateHostSetRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *CreateHostSetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *CreateHostSetRequest) GetItem() *resource.HostSet {
	if x != nil {
		return x.Item
	}
	return nil
}

type CreateHostSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri  string            `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Item *resource.HostSet `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateHostSetResponse) Reset() {
	*x = CreateHostSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_set_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostSetResponse) ProtoMessage() {}

func (x *CreateHostSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_set_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostSetResponse.ProtoReflect.Descriptor instead.
func (*CreateHostSetResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_set_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateHostSetResponse) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *CreateHostSetResponse) GetItem() *resource.HostSet {
	if x != nil {
		return x.Item
	}
	return nil
}

type UpdateHostSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org        string                `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	Project    string                `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Id         string                `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Item       *resource.HostSet     `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,5,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateHostSetRequest) Reset() {
	*x = UpdateHostSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_set_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHostSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostSetRequest) ProtoMessage() {}

func (x *UpdateHostSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_set_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostSetRequest.ProtoReflect.Descriptor instead.
func (*UpdateHostSetRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_set_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateHostSetRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *UpdateHostSetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *UpdateHostSetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateHostSetRequest) GetItem() *resource.HostSet {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *UpdateHostSetRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateHostSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *resource.HostSet `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *UpdateHostSetResponse) Reset() {
	*x = UpdateHostSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_set_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHostSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostSetResponse) ProtoMessage() {}

func (x *UpdateHostSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_set_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostSetResponse.ProtoReflect.Descriptor instead.
func (*UpdateHostSetResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_set_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateHostSetResponse) GetItem() *resource.HostSet {
	if x != nil {
		return x.Item
	}
	return nil
}

type DeleteHostSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org     string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Id      string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteHostSetRequest) Reset() {
	*x = DeleteHostSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_set_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHostSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHostSetRequest) ProtoMessage() {}

func (x *DeleteHostSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_set_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHostSetRequest.ProtoReflect.Descriptor instead.
func (*DeleteHostSetRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_set_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteHostSetRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *DeleteHostSetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *DeleteHostSetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteHostSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Existed bool `protobuf:"varint,1,opt,name=existed,proto3" json:"existed,omitempty"`
}

func (x *DeleteHostSetResponse) Reset() {
	*x = DeleteHostSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_v1_host_set_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHostSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHostSetResponse) ProtoMessage() {}

func (x *DeleteHostSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_v1_host_set_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHostSetResponse.ProtoReflect.Descriptor instead.
func (*DeleteHostSetResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_v1_host_set_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteHostSetResponse) GetExisted() bool {
	if x != nil {
		return x.Existed
	}
	return false
}

var File_controller_api_v1_host_set_service_proto protoreflect.FileDescriptor

var file_controller_api_v1_host_set_service_proto_rawDesc = []byte{
	0x0a, 0x28, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x2c, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65,
	0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x4d, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xa5, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x32, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x22, 0x51, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x7b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x22, 0x62, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x37,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xc8, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f,
	0x72, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x50, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x22, 0x52, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x2a, 0x5d, 0x0a, 0x0b, 0x48,
	0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x4f,
	0x53, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x32, 0x86, 0x0a, 0x0a, 0x0e, 0x48,
	0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xed, 0x01,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x36, 0x12, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x62, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x92, 0x41, 0x52, 0x4a, 0x50, 0x0a, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x25, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x12,
	0x1c, 0x0a, 0x1a, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0xe8, 0x01,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x73, 0x12, 0x26,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x86, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x74, 0x73, 0x92, 0x41, 0x52, 0x4a, 0x50, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x45, 0x0a, 0x25, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x12, 0x1c, 0x0a, 0x1a, 0x1a, 0x18,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0xf7, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x73, 0x3a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x62, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x92, 0x41, 0x52,
	0x4a, 0x50, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x25, 0x54,
	0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x2e, 0x12, 0x1c, 0x0a, 0x1a, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0xab, 0x02, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6b,
	0x32, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x3a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x5a, 0x33, 0x32, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x52, 0x4a, 0x50,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x25, 0x54, 0x68, 0x65,
	0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x2e, 0x12, 0x1c, 0x0a, 0x1a, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0xf0, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x2a, 0x2e,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41,
	0x52, 0x4a, 0x50, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x25,
	0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x2e, 0x12, 0x1c, 0x0a, 0x1a, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x42, 0xa6, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f,
	0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0x92, 0x41, 0x62, 0x12, 0x5c, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x49, 0x41, 0x4d, 0x20, 0x41, 0x50, 0x49,
	0x12, 0x3f, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x41, 0x4d, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x74, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x32, 0x05, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x2a, 0x02, 0x02, 0x01, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_api_v1_host_set_service_proto_rawDescOnce sync.Once
	file_controller_api_v1_host_set_service_proto_rawDescData = file_controller_api_v1_host_set_service_proto_rawDesc
)

func file_controller_api_v1_host_set_service_proto_rawDescGZIP() []byte {
	file_controller_api_v1_host_set_service_proto_rawDescOnce.Do(func() {
		file_controller_api_v1_host_set_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_api_v1_host_set_service_proto_rawDescData)
	})
	return file_controller_api_v1_host_set_service_proto_rawDescData
}

var file_controller_api_v1_host_set_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_controller_api_v1_host_set_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_controller_api_v1_host_set_service_proto_goTypes = []interface{}{
	(HostSetView)(0),              // 0: controller.api.v1.HostSetView
	(*GetHostSetRequest)(nil),     // 1: controller.api.v1.GetHostSetRequest
	(*GetHostSetResponse)(nil),    // 2: controller.api.v1.GetHostSetResponse
	(*ListHostSetsRequest)(nil),   // 3: controller.api.v1.ListHostSetsRequest
	(*ListHostSetsResponse)(nil),  // 4: controller.api.v1.ListHostSetsResponse
	(*CreateHostSetRequest)(nil),  // 5: controller.api.v1.CreateHostSetRequest
	(*CreateHostSetResponse)(nil), // 6: controller.api.v1.CreateHostSetResponse
	(*UpdateHostSetRequest)(nil),  // 7: controller.api.v1.UpdateHostSetRequest
	(*UpdateHostSetResponse)(nil), // 8: controller.api.v1.UpdateHostSetResponse
	(*DeleteHostSetRequest)(nil),  // 9: controller.api.v1.DeleteHostSetRequest
	(*DeleteHostSetResponse)(nil), // 10: controller.api.v1.DeleteHostSetResponse
	(*resource.HostSet)(nil),      // 11: controller.api.resource.v1.HostSet
	(*field_mask.FieldMask)(nil),  // 12: google.protobuf.FieldMask
}
var file_controller_api_v1_host_set_service_proto_depIdxs = []int32{
	0,  // 0: controller.api.v1.GetHostSetRequest.view:type_name -> controller.api.v1.HostSetView
	11, // 1: controller.api.v1.GetHostSetResponse.item:type_name -> controller.api.resource.v1.HostSet
	0,  // 2: controller.api.v1.ListHostSetsRequest.view:type_name -> controller.api.v1.HostSetView
	11, // 3: controller.api.v1.ListHostSetsResponse.items:type_name -> controller.api.resource.v1.HostSet
	11, // 4: controller.api.v1.CreateHostSetRequest.item:type_name -> controller.api.resource.v1.HostSet
	11, // 5: controller.api.v1.CreateHostSetResponse.item:type_name -> controller.api.resource.v1.HostSet
	11, // 6: controller.api.v1.UpdateHostSetRequest.item:type_name -> controller.api.resource.v1.HostSet
	12, // 7: controller.api.v1.UpdateHostSetRequest.update_mask:type_name -> google.protobuf.FieldMask
	11, // 8: controller.api.v1.UpdateHostSetResponse.item:type_name -> controller.api.resource.v1.HostSet
	1,  // 9: controller.api.v1.HostSetService.GetHostSet:input_type -> controller.api.v1.GetHostSetRequest
	3,  // 10: controller.api.v1.HostSetService.ListHostSets:input_type -> controller.api.v1.ListHostSetsRequest
	5,  // 11: controller.api.v1.HostSetService.CreateHostSet:input_type -> controller.api.v1.CreateHostSetRequest
	7,  // 12: controller.api.v1.HostSetService.UpdateHostSet:input_type -> controller.api.v1.UpdateHostSetRequest
	9,  // 13: controller.api.v1.HostSetService.DeleteHostSet:input_type -> controller.api.v1.DeleteHostSetRequest
	2,  // 14: controller.api.v1.HostSetService.GetHostSet:output_type -> controller.api.v1.GetHostSetResponse
	4,  // 15: controller.api.v1.HostSetService.ListHostSets:output_type -> controller.api.v1.ListHostSetsResponse
	6,  // 16: controller.api.v1.HostSetService.CreateHostSet:output_type -> controller.api.v1.CreateHostSetResponse
	8,  // 17: controller.api.v1.HostSetService.UpdateHostSet:output_type -> controller.api.v1.UpdateHostSetResponse
	10, // 18: controller.api.v1.HostSetService.DeleteHostSet:output_type -> controller.api.v1.DeleteHostSetResponse
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_controller_api_v1_host_set_service_proto_init() }
func file_controller_api_v1_host_set_service_proto_init() {
	if File_controller_api_v1_host_set_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_controller_api_v1_host_set_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_set_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_set_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHostSetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_set_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHostSetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_set_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_set_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_set_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHostSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_set_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHostSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_set_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHostSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_v1_host_set_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHostSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_api_v1_host_set_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_api_v1_host_set_service_proto_goTypes,
		DependencyIndexes: file_controller_api_v1_host_set_service_proto_depIdxs,
		EnumInfos:         file_controller_api_v1_host_set_service_proto_enumTypes,
		MessageInfos:      file_controller_api_v1_host_set_service_proto_msgTypes,
	}.Build()
	File_controller_api_v1_host_set_service_proto = out.File
	file_controller_api_v1_host_set_service_proto_rawDesc = nil
	file_controller_api_v1_host_set_service_proto_goTypes = nil
	file_controller_api_v1_host_set_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HostSetServiceClient is the client API for HostSetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HostSetServiceClient interface {
	GetHostSet(ctx context.Context, in *GetHostSetRequest, opts ...grpc.CallOption) (*GetHostSetResponse, error)
	ListHostSets(ctx context.Context, in *ListHostSetsRequest, opts ...grpc.CallOption) (*ListHostSetsResponse, error)
	CreateHostSet(ctx context.Context, in *CreateHostSetRequest, opts ...grpc.CallOption) (*CreateHostSetResponse, error)
	UpdateHostSet(ctx context.Context, in *UpdateHostSetRequest, opts ...grpc.CallOption) (*UpdateHostSetResponse, error)
	DeleteHostSet(ctx context.Context, in *DeleteHostSetRequest, opts ...grpc.CallOption) (*DeleteHostSetResponse, error)
}

type hostSetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostSetServiceClient(cc grpc.ClientConnInterface) HostSetServiceClient {
	return &hostSetServiceClient{cc}
}

func (c *hostSetServiceClient) GetHostSet(ctx context.Context, in *GetHostSetRequest, opts ...grpc.CallOption) (*GetHostSetResponse, error) {
	out := new(GetHostSetResponse)
	err := c.cc.Invoke(ctx, "/controller.api.v1.HostSetService/GetHostSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostSetServiceClient) ListHostSets(ctx context.Context, in *ListHostSetsRequest, opts ...grpc.CallOption) (*ListHostSetsResponse, error) {
	out := new(ListHostSetsResponse)
	err := c.cc.Invoke(ctx, "/controller.api.v1.HostSetService/ListHostSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostSetServiceClient) CreateHostSet(ctx context.Context, in *CreateHostSetRequest, opts ...grpc.CallOption) (*CreateHostSetResponse, error) {
	out := new(CreateHostSetResponse)
	err := c.cc.Invoke(ctx, "/controller.api.v1.HostSetService/CreateHostSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostSetServiceClient) UpdateHostSet(ctx context.Context, in *UpdateHostSetRequest, opts ...grpc.CallOption) (*UpdateHostSetResponse, error) {
	out := new(UpdateHostSetResponse)
	err := c.cc.Invoke(ctx, "/controller.api.v1.HostSetService/UpdateHostSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostSetServiceClient) DeleteHostSet(ctx context.Context, in *DeleteHostSetRequest, opts ...grpc.CallOption) (*DeleteHostSetResponse, error) {
	out := new(DeleteHostSetResponse)
	err := c.cc.Invoke(ctx, "/controller.api.v1.HostSetService/DeleteHostSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostSetServiceServer is the server API for HostSetService service.
type HostSetServiceServer interface {
	GetHostSet(context.Context, *GetHostSetRequest) (*GetHostSetResponse, error)
	ListHostSets(context.Context, *ListHostSetsRequest) (*ListHostSetsResponse, error)
	CreateHostSet(context.Context, *CreateHostSetRequest) (*CreateHostSetResponse, error)
	UpdateHostSet(context.Context, *UpdateHostSetRequest) (*UpdateHostSetResponse, error)
	DeleteHostSet(context.Context, *DeleteHostSetRequest) (*DeleteHostSetResponse, error)
}

// UnimplementedHostSetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHostSetServiceServer struct {
}

func (*UnimplementedHostSetServiceServer) GetHostSet(context.Context, *GetHostSetRequest) (*GetHostSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostSet not implemented")
}
func (*UnimplementedHostSetServiceServer) ListHostSets(context.Context, *ListHostSetsRequest) (*ListHostSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHostSets not implemented")
}
func (*UnimplementedHostSetServiceServer) CreateHostSet(context.Context, *CreateHostSetRequest) (*CreateHostSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostSet not implemented")
}
func (*UnimplementedHostSetServiceServer) UpdateHostSet(context.Context, *UpdateHostSetRequest) (*UpdateHostSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostSet not implemented")
}
func (*UnimplementedHostSetServiceServer) DeleteHostSet(context.Context, *DeleteHostSetRequest) (*DeleteHostSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostSet not implemented")
}

func RegisterHostSetServiceServer(s *grpc.Server, srv HostSetServiceServer) {
	s.RegisterService(&_HostSetService_serviceDesc, srv)
}

func _HostSetService_GetHostSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostSetServiceServer).GetHostSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.v1.HostSetService/GetHostSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostSetServiceServer).GetHostSet(ctx, req.(*GetHostSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostSetService_ListHostSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostSetServiceServer).ListHostSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.v1.HostSetService/ListHostSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostSetServiceServer).ListHostSets(ctx, req.(*ListHostSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostSetService_CreateHostSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostSetServiceServer).CreateHostSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.v1.HostSetService/CreateHostSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostSetServiceServer).CreateHostSet(ctx, req.(*CreateHostSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostSetService_UpdateHostSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostSetServiceServer).UpdateHostSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.v1.HostSetService/UpdateHostSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostSetServiceServer).UpdateHostSet(ctx, req.(*UpdateHostSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostSetService_DeleteHostSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostSetServiceServer).DeleteHostSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.api.v1.HostSetService/DeleteHostSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostSetServiceServer).DeleteHostSet(ctx, req.(*DeleteHostSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HostSetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controller.api.v1.HostSetService",
	HandlerType: (*HostSetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostSet",
			Handler:    _HostSetService_GetHostSet_Handler,
		},
		{
			MethodName: "ListHostSets",
			Handler:    _HostSetService_ListHostSets_Handler,
		},
		{
			MethodName: "CreateHostSet",
			Handler:    _HostSetService_CreateHostSet_Handler,
		},
		{
			MethodName: "UpdateHostSet",
			Handler:    _HostSetService_UpdateHostSet_Handler,
		},
		{
			MethodName: "DeleteHostSet",
			Handler:    _HostSetService_DeleteHostSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller/api/v1/host_set_service.proto",
}
