syntax = "proto3";

package controller.storage.iam.store.v1;
option go_package = "github.com/hashicorp/watchtower/internal/iam/store;store";

import "controller/storage/iam/store/v1/timestamp.proto";
import "controller/storage/iam/store/v1/scope.proto";

message Role {
  // public_id is used to access the Role via an API
  // @inject_tag: gorm:"primary_key"
  string public_id = 1;

  // create_time from the RDBMS
  // @inject_tag: `gorm:"default:current_timestamp"`
  Timestamp create_time = 2;

  // update_time from the RDBMS
  // @inject_tag: `gorm:"default:current_timestamp"`
  Timestamp update_time = 3;

  // name is the optional friendly name used to
  // access the Role via an API
  // @inject_tag: `gorm:"default:null"`
  string name = 5;

  // description of the role
  string description = 6;

  // scope id for the role
  // @inject_tag: `gorm:"default:null"`
  string scope_id = 7;

  // disabled is by default false and allows a Role to be marked disabled.
  bool disabled = 9;
}

message UserRole {
  // create_time from the RDBMS
  // @inject_tag: `gorm:"default:current_timestamp"`
  Timestamp create_time = 1;

  // role_id is the role of this principal.
  string role_id = 2;

  // principal_id is the public_id of the user (which is the principal)
  string principal_id = 3;
}

message GroupRole {
  // create_time from the RDBMS
  // @inject_tag: `gorm:"default:current_timestamp"`
  Timestamp create_time = 1;

  // role_id is the role of this principal.
  string role_id = 2;

  // principal_id is the public_id of the group (which is the principal)
  string principal_id = 3;
}

message AssignedRoleView {
  // create_time from the RDBMS
  // @inject_tag: `gorm:"default:current_timestamp"`
  Timestamp create_time = 1;

  // role_id is the role of this principal.
  string role_id = 2;

  // Principal type (User or Group)
  string type = 3;

  string principal_id = 4;
}