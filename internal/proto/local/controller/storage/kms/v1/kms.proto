syntax = "proto3";

package controller.storage.kms.v1;
option go_package = "github.com/hashicorp/watchtower/internal/kms/store;store";

import "controller/storage/timestamp/v1/timestamp.proto";

// KeyEntry contains information about a key used within the Watchtower. It
// consits of a wrapped key, its ID information, and information about its
// parent key ID. No parent means it's encrypted by the top-level KMS.
message KeyEntry {
  // public_id is the used to access the KeyEntry via an API
  // @inject_tag: gorm:"primary_key"
  string public_id = 1;

  // create_time from the RDBMS
  // @inject_tag: `gorm:"default:current_timestamp"`
  timestamp.v1.Timestamp create_time = 2;

  // update_time from the RDBMS
  // @inject_tag: `gorm:"default:current_timestamp"`
  timestamp.v1.Timestamp update_time = 3;

  // ParentKeyId is the parent key ID. An empty string means the top-level
  // KMS.
  // @inject_tag: `gorm:"default:null"`
  string parent_key_id = 4;

  // KeyId is this key's ID. This can be used to form a key tree.
  // @inject_tag: gorm:"default:null"
  string key_id = 5;

  // version is this key's version.
  // @inject_tag: gorm:"default:null"
  int32 version = 6;

  // Key is the key itself. This should be a marshaled
  // wrapping.EncryptedBlobInfo.
  // @inject_tag: `gorm:"default:null"`
  bytes key = 7;

  // scope_id  is the key's scope id (an organization).
  // @inject_tag: `gorm:"default:null"`
  string scope_id = 8;

  // purpose is the key's purpose (msp, organization, database, oplog, etc)
  string purpose = 9;

  // kms_is is the key's KMS ID. This will be set if the encryptor of a key is a
  // KMS. It is invalid to have both this and Parent set.
  string kms_id = 10;

  // type is the key's type (organization, msp)
  string type = 11;
}
